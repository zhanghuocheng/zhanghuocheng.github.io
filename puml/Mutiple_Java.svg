<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="9777.5px" preserveAspectRatio="none" style="width:1268px;height:9777px;" version="1.1" viewBox="0 0 1268 9777" width="1268.75px" zoomAndPan="magnify"><defs><filter height="300%" id="f16g1p9ivlka0v" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="1.25"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="2.5" dy="2.5" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="68.125" x="6.25" y="4879.5723"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="55.625" x="12.5" y="4895.8498">Java 并发体系</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="113.125" x="105.625" y="1028.627"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="100.625" x="111.875" y="1044.9045">1. Java 内存模型（JMM）</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="250" y="30.975"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="256.25" y="47.2525">线程通信机制</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="346.25" y="12.5"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="352.5" y="28.7775">内存共享</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="50.625" x="425" y="12.5"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="38.125" x="431.25" y="28.7775">Java 采用</text><path d="M393.75,24.725 L400,24.725 C409.375,24.725 409.375,24.725 418.75,24.725 L425,24.725 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M315,43.2001 L321.25,43.2001 C330.625,43.2001 330.625,24.725 340,24.725 L346.25,24.725 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="346.25" y="49.4501"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="352.5" y="65.7275">消息传递</text><path d="M315,43.2001 L321.25,43.2001 C330.625,43.2001 330.625,61.6751 340,61.6751 L346.25,61.6751 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M218.75,1040.8521 L225,1040.8521 C234.375,1040.8521 234.375,43.2001 243.75,43.2001 L250,43.2001 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="250" y="326.5756"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="256.25" y="342.8531">内存模型</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="328.75" y="141.8253"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="335" y="158.1027">重排序</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="248.75" x="398.75" y="86.4001"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="236.25" x="405" y="102.6776">为了程序的性能，处理器、编译器都会对程序进行重排序处理</text><path d="M367.5,154.0503 L373.75,154.0503 C383.125,154.0503 383.125,98.6252 392.5,98.6252 L398.75,98.6252 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="398.75" y="141.8253"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="405" y="158.1027">条件</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="161.25" x="460" y="123.3502"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="148.75" x="466.25" y="139.6277">在单线程环境不能改变程序运行的结果</text><path d="M428.75,154.0503 L435,154.0503 C444.375,154.0503 444.375,135.5753 453.75,135.5753 L460,135.5753 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="143.75" x="460" y="160.3003"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="131.25" x="466.25" y="176.5778">存在数据依赖关系的不允许重排序</text><path d="M428.75,154.0503 L435,154.0503 C444.375,154.0503 444.375,172.5253 453.75,172.5253 L460,172.5253 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M367.5,154.0503 L373.75,154.0503 C383.125,154.0503 383.125,154.0503 392.5,154.0503 L398.75,154.0503 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="398.75" y="197.2504"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="405" y="213.5278">问题</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="187.5" x="460" y="197.2504"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="175" x="466.25" y="213.5278">重排序在多线程环境下可能会导致数据不安全</text><path d="M428.75,209.4754 L435,209.4754 C444.375,209.4754 444.375,209.4754 453.75,209.4754 L460,209.4754 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M367.5,154.0503 L373.75,154.0503 C383.125,154.0503 383.125,209.4754 392.5,209.4754 L398.75,209.4754 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M297.5,338.8007 L303.75,338.8007 C313.125,338.8007 313.125,154.0503 322.5,154.0503 L328.75,154.0503 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="328.75" y="308.1006"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="335" y="324.3781">顺序一致性</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="126.25" x="416.25" y="234.2004"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="113.75" x="422.5" y="250.4779">多线程环境下的理论参考模型</text><path d="M385,320.3256 L391.25,320.3256 C400.625,320.3256 400.625,246.4255 410,246.4255 L416.25,246.4255 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="152.5" x="416.25" y="271.1505"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="140" x="422.5" y="287.428">为程序提供了极强的内存可见性保证</text><path d="M385,320.3256 L391.25,320.3256 C400.625,320.3256 400.625,283.3755 410,283.3755 L416.25,283.3755 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="416.25" y="345.0507"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="422.5" y="361.3281">特性</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="205" x="477.5" y="308.1006"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="192.5" x="483.75" y="324.3781">一个线程中的所有操作必须按照程序的顺序来致性</text><path d="M446.25,357.2757 L452.5,357.2757 C461.875,357.2757 461.875,320.3256 471.25,320.3256 L477.5,320.3256 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="275" x="477.5" y="345.0507"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="262.5" x="483.75" y="361.3281">所有的线程都只能看到一个单一的操作执行顺序，不管程序是否同步</text><path d="M446.25,357.2757 L452.5,357.2757 C461.875,357.2757 461.875,357.2757 471.25,357.2757 L477.5,357.2757 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="187.5" x="477.5" y="382.0007"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="175" x="483.75" y="398.2782">每个操作都必须原子执行并且对所有线程可见</text><path d="M446.25,357.2757 L452.5,357.2757 C461.875,357.2757 461.875,394.2258 471.25,394.2258 L477.5,394.2258 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M385,320.3256 L391.25,320.3256 C400.625,320.3256 400.625,357.2757 410,357.2757 L416.25,357.2757 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M297.5,338.8007 L303.75,338.8007 C313.125,338.8007 313.125,320.3256 322.5,320.3256 L328.75,320.3256 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="75.625" x="328.75" y="474.3759"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="63.125" x="335" y="490.6534">happens-before</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="162.5" x="435.625" y="418.9508"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="150" x="441.875" y="435.2283">JVM 中最核心的理论，保证内存可见性</text><path d="M404.375,486.601 L410.625,486.601 C420,486.601 420,431.1758 429.375,431.1758 L435.625,431.1758 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="554.375" x="435.625" y="455.9009"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="541.875" x="441.875" y="472.1783">JVM 中，如果一个操作的执行结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 存在数据依赖关系的不允许重排序</text><path d="M404.375,486.601 L410.625,486.601 C420,486.601 420,468.1259 429.375,468.1259 L435.625,468.1259 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="435.625" y="511.326"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="441.875" y="527.6035">理论</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="535.625" x="496.875" y="492.851"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="523.125" x="503.125" y="509.1284">如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作顺序排在第二个操作之前</text><path d="M465.625,523.551 L471.875,523.551 C481.25,523.551 481.25,505.076 490.625,505.076 L496.875,505.076 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="765" x="496.875" y="529.801"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="752.5" x="503.125" y="546.0785">两个操作之前存在 happens-befoe 关系，并不意味着一定要按照 happens-before 原则指定的顺序来执行，如果，重排序之后的运行结果和 happens-before 运行结果相同，那么这种重排序不非法</text><path d="M465.625,523.551 L471.875,523.551 C481.25,523.551 481.25,542.0261 490.625,542.0261 L496.875,542.0261 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M404.375,486.601 L410.625,486.601 C420,486.601 420,523.551 429.375,523.551 L435.625,523.551 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M297.5,338.8007 L303.75,338.8007 C313.125,338.8007 313.125,486.601 322.5,486.601 L328.75,486.601 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="53.75" x="328.75" y="566.7511"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="41.25" x="335" y="583.0286">as-if-serial</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="371.25" x="413.75" y="566.7511"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="358.75" x="420" y="583.0286">所有的操作都可以为了优化而被重排序，但是你必须要保证重排序之后执行的结果不能被改变</text><path d="M382.5,578.9761 L388.75,578.9761 C398.125,578.9761 398.125,578.9761 407.5,578.9761 L413.75,578.9761 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M297.5,338.8007 L303.75,338.8007 C313.125,338.8007 313.125,578.9761 322.5,578.9761 L328.75,578.9761 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M218.75,1040.8521 L225,1040.8521 C234.375,1040.8521 234.375,338.8007 243.75,338.8007 L250,338.8007 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="64.375" x="250" y="1047.1021"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="51.875" x="256.25" y="1063.3795">synchronized</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="73.75" x="345.625" y="603.7012"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="61.25" x="351.875" y="619.9786">同步、重量级锁</text><path d="M314.375,1059.3271 L320.625,1059.3271 C330,1059.3271 330,615.9262 339.375,615.9262 L345.625,615.9262 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="345.625" y="640.6512"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="351.875" y="656.9287">原理</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="530.625" x="406.875" y="640.6512"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="518.125" x="413.125" y="656.9287">synchronized 可以保证方法或者代码块在运行市，同一时刻只有一个方法可以进入临界区，同时，它还可以保证共享变量的内存可见性</text><path d="M375.625,652.8763 L381.875,652.8763 C391.25,652.8763 391.25,652.8763 400.625,652.8763 L406.875,652.8763 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M314.375,1059.3271 L320.625,1059.3271 C330,1059.3271 330,652.8763 339.375,652.8763 L345.625,652.8763 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="345.625" y="714.5514"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="351.875" y="730.8289">锁对象</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="143.75" x="415.625" y="677.6013"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="131.25" x="421.875" y="693.8788">普通同步方法，锁是当前实例对象</text><path d="M384.375,726.7764 L390.625,726.7764 C400,726.7764 400,689.8264 409.375,689.8264 L415.625,689.8264 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="168.75" x="415.625" y="714.5514"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="156.25" x="421.875" y="730.8289">静态同步方法，锁是当前类的 class 对象</text><path d="M384.375,726.7764 L390.625,726.7764 C400,726.7764 400,726.7764 409.375,726.7764 L415.625,726.7764 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="135" x="415.625" y="751.5015"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="122.5" x="421.875" y="767.7789">同步方法块，锁是括号里的对象</text><path d="M384.375,726.7764 L390.625,726.7764 C400,726.7764 400,763.7265 409.375,763.7265 L415.625,763.7265 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M314.375,1059.3271 L320.625,1059.3271 C330,1059.3271 330,726.7764 339.375,726.7764 L345.625,726.7764 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="345.625" y="862.3517"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="351.875" y="878.6292">实现机制</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="59.375" x="424.375" y="843.8766"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="46.875" x="430.625" y="860.1541">Java 对象头</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="192.5" x="515" y="788.4515"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="180" x="521.25" y="804.729">synchronized 的锁就是保存在Java 对象头中的</text><path d="M483.75,856.1017 L490,856.1017 C499.375,856.1017 499.375,800.6766 508.75,800.6766 L515,800.6766 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="73.75" x="515" y="862.3517"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="61.25" x="521.25" y="878.6292">包括两部分数据</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="96.875" x="620" y="843.8766"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="84.375" x="626.25" y="860.1541">Mark Word(标记字段)</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="495.625" x="748.125" y="825.4016"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="483.125" x="754.375" y="841.6791">Mark Word 被设计成一个非固定的数据结果以便在极小的空间内存储尽量多的数据，它会根据对象的状态复用自己的存储空间</text><path d="M716.875,856.1017 L723.125,856.1017 C732.5,856.1017 732.5,837.6266 741.875,837.6266 L748.125,837.6266 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="748.125" y="862.3517"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="754.375" y="878.6292">包括</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="373.75" x="809.375" y="862.3517"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="361.25" x="815.625" y="878.6292">哈希码（HashCode）、GC 分代年龄、锁状态标记、线程持有锁、偏向锁线程Id、偏向时间戳</text><path d="M778.125,874.5767 L784.375,874.5767 C793.75,874.5767 793.75,874.5767 803.125,874.5767 L809.375,874.5767 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M716.875,856.1017 L723.125,856.1017 C732.5,856.1017 732.5,874.5767 741.875,874.5767 L748.125,874.5767 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M588.75,874.5767 L595,874.5767 C604.375,874.5767 604.375,856.1017 613.75,856.1017 L620,856.1017 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="108.125" x="620" y="899.3018"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="95.625" x="626.25" y="915.5792">Klass Pointer (类型指针)</text><path d="M588.75,874.5767 L595,874.5767 C604.375,874.5767 604.375,911.5268 613.75,911.5268 L620,911.5268 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M483.75,856.1017 L490,856.1017 C499.375,856.1017 499.375,874.5767 508.75,874.5767 L515,874.5767 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M393.125,874.5767 L399.375,874.5767 C408.75,874.5767 408.75,856.1017 418.125,856.1017 L424.375,856.1017 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="41.875" x="424.375" y="936.2518"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="29.375" x="430.625" y="952.5293">monitor</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="36.25" x="497.5" y="936.2518"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="23.75" x="503.75" y="952.5293">owner</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="511.25" x="565" y="936.2518"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="498.75" x="571.25" y="952.5293">初始时为 Null 表示当前没有任何线程拥有该 monitor record，当线程成功拥有该锁后保存线程唯一表示，当锁释放时又设置为 Null</text><path d="M533.75,948.4769 L540,948.4769 C549.375,948.4769 549.375,948.4769 558.75,948.4769 L565,948.4769 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M466.25,948.4769 L472.5,948.4769 C481.875,948.4769 481.875,948.4769 491.25,948.4769 L497.5,948.4769 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M393.125,874.5767 L399.375,874.5767 C408.75,874.5767 408.75,948.4769 418.125,948.4769 L424.375,948.4769 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M314.375,1059.3271 L320.625,1059.3271 C330,1059.3271 330,874.5767 339.375,874.5767 L345.625,874.5767 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="345.625" y="1231.8524"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="351.875" y="1248.1299">锁优化</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="415.625" y="1028.627"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="421.875" y="1044.9045">自旋锁</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="362.5" x="485.625" y="973.2019"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="350" x="491.875" y="989.4794">该线程的等待一段时间，不会被立刻挂起，看持有锁的线程是否会很快释放锁（循环方式）</text><path d="M454.375,1040.8521 L460.625,1040.8521 C470,1040.8521 470,985.4269 479.375,985.4269 L485.625,985.4269 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="167.5" x="485.625" y="1010.152"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="155" x="491.875" y="1026.4294">自旋次数较难控制（-XX:preBlockSpin）</text><path d="M454.375,1040.8521 L460.625,1040.8521 C470,1040.8521 470,1022.377 479.375,1022.377 L485.625,1022.377 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="435" x="485.625" y="1047.1021"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="422.5" x="491.875" y="1063.3795">存在理论：线程的频繁挂起、唤醒负担较重， 可以认为每个线程占用锁的时间很短，线程挂起再唤醒得不偿失</text><path d="M454.375,1040.8521 L460.625,1040.8521 C470,1040.8521 470,1059.3271 479.375,1059.3271 L485.625,1059.3271 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="485.625" y="1084.0521"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="491.875" y="1100.3296">缺点</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="82.5" x="546.875" y="1084.0521"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="70" x="553.125" y="1100.3296">自选次数无法确定</text><path d="M515.625,1096.2772 L521.875,1096.2772 C531.25,1096.2772 531.25,1096.2772 540.625,1096.2772 L546.875,1096.2772 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M454.375,1040.8521 L460.625,1040.8521 C470,1040.8521 470,1096.2772 479.375,1096.2772 L485.625,1096.2772 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M384.375,1244.0775 L390.625,1244.0775 C400,1244.0775 400,1040.8521 409.375,1040.8521 L415.625,1040.8521 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="415.625" y="1139.4772"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="421.875" y="1155.7547">适应性自旋锁</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="362.5" x="511.875" y="1121.0022"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="350" x="518.125" y="1137.2797">自旋次数不再是确定的，它是由前一次在同一个锁上的自选时间及锁的拥有者的状态来决定</text><path d="M480.625,1151.7023 L486.875,1151.7023 C496.25,1151.7023 496.25,1133.2272 505.625,1133.2272 L511.875,1133.2272 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="310" x="511.875" y="1157.9523"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="297.5" x="518.125" y="1174.2297">自选成功，则可以增加自旋次数，如果获取锁经常失败，那么自旋次数会减少</text><path d="M480.625,1151.7023 L486.875,1151.7023 C496.25,1151.7023 496.25,1170.1773 505.625,1170.1773 L511.875,1170.1773 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M384.375,1244.0775 L390.625,1244.0775 C400,1244.0775 400,1151.7023 409.375,1151.7023 L415.625,1151.7023 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="415.625" y="1213.3774"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="421.875" y="1229.6548">锁消除</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="186.25" x="485.625" y="1194.9023"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="173.75" x="491.875" y="1211.1798">若不存在数据竞争的情况，JVM会消除锁机制</text><path d="M454.375,1225.6024 L460.625,1225.6024 C470,1225.6024 470,1207.1274 479.375,1207.1274 L485.625,1207.1274 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="485.625" y="1231.8524"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="491.875" y="1248.1299">判断依据</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="564.375" y="1231.8524"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="570.625" y="1248.1299">变量逃逸</text><path d="M533.125,1244.0775 L539.375,1244.0775 C548.75,1244.0775 548.75,1244.0775 558.125,1244.0775 L564.375,1244.0775 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M454.375,1225.6024 L460.625,1225.6024 C470,1225.6024 470,1244.0775 479.375,1244.0775 L485.625,1244.0775 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M384.375,1244.0775 L390.625,1244.0775 C400,1244.0775 400,1225.6024 409.375,1225.6024 L415.625,1225.6024 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="415.625" y="1268.8025"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="421.875" y="1285.08">锁粗化</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="378.125" x="485.625" y="1268.8025"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="365.625" x="491.875" y="1285.08">将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。例如 for 循环内部获取锁</text><path d="M454.375,1281.0275 L460.625,1281.0275 C470,1281.0275 470,1281.0275 479.375,1281.0275 L485.625,1281.0275 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M384.375,1244.0775 L390.625,1244.0775 C400,1244.0775 400,1281.0275 409.375,1281.0275 L415.625,1281.0275 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="415.625" y="1361.1777"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="421.875" y="1377.4551">轻量级锁</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="327.5" x="494.375" y="1305.7526"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="315" x="500.625" y="1322.03">在没有多线程的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗</text><path d="M463.125,1373.4027 L469.375,1373.4027 C478.75,1373.4027 478.75,1317.9776 488.125,1317.9776 L494.375,1317.9776 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="122.5" x="494.375" y="1342.7026"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="110" x="500.625" y="1358.9801">通过 CAS 来获取锁和释放锁</text><path d="M463.125,1373.4027 L469.375,1373.4027 C478.75,1373.4027 478.75,1354.9277 488.125,1354.9277 L494.375,1354.9277 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="494.375" y="1379.6527"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="500.625" y="1395.9302">性能依据</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="240" x="573.125" y="1379.6527"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="227.5" x="579.375" y="1395.9302">对于绝大部分的锁，在整个生命周期内都是不会存在竞争的</text><path d="M541.875,1391.8777 L548.125,1391.8777 C557.5,1391.8777 557.5,1391.8777 566.875,1391.8777 L573.125,1391.8777 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M463.125,1373.4027 L469.375,1373.4027 C478.75,1373.4027 478.75,1391.8777 488.125,1391.8777 L494.375,1391.8777 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="494.375" y="1416.6028"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="500.625" y="1432.8802">缺点</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="196.25" x="555.625" y="1416.6028"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="183.75" x="561.875" y="1432.8802">在多线程情况下，其运行效率比重量级锁还会慢</text><path d="M524.375,1428.8278 L530.625,1428.8278 C540,1428.8278 540,1428.8278 549.375,1428.8278 L555.625,1428.8278 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M463.125,1373.4027 L469.375,1373.4027 C478.75,1373.4027 478.75,1428.8278 488.125,1428.8278 L494.375,1428.8278 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M384.375,1244.0775 L390.625,1244.0775 C400,1244.0775 400,1373.4027 409.375,1373.4027 L415.625,1373.4027 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="415.625" y="1472.0279"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="421.875" y="1488.3054">偏向锁线程</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="275" x="503.125" y="1453.5529"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="262.5" x="509.375" y="1469.8303">为了在无多线程竞争的情况下尽量较少不必要的轻量级锁的执行路径</text><path d="M471.875,1484.2529 L478.125,1484.2529 C487.5,1484.2529 487.5,1465.7779 496.875,1465.7779 L503.125,1465.7779 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="306.25" x="503.125" y="1490.5029"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="293.75" x="509.375" y="1506.7804">主要尽可能避免不必需要的 CAS 操作，如果竞争锁失败，则升级为轻量级锁</text><path d="M471.875,1484.2529 L478.125,1484.2529 C487.5,1484.2529 487.5,1502.728 496.875,1502.728 L503.125,1502.728 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M384.375,1244.0775 L390.625,1244.0775 C400,1244.0775 400,1484.2529 409.375,1484.2529 L415.625,1484.2529 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M314.375,1059.3271 L320.625,1059.3271 C330,1059.3271 330,1244.0775 339.375,1244.0775 L345.625,1244.0775 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M218.75,1040.8521 L225,1040.8521 C234.375,1040.8521 234.375,1059.3271 243.75,1059.3271 L250,1059.3271 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="40" x="250" y="1693.7283"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="27.5" x="256.25" y="1710.0058">volatile</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="321.25" y="1545.928"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="327.5" y="1562.2055">特性</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="276.25" x="382.5" y="1527.453"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="263.75" x="388.75" y="1543.7305">volatile 可见性：对于 volatile 的读，总可以看到对这个变量最终的写</text><path d="M351.25,1558.1531 L357.5,1558.1531 C366.875,1558.1531 366.875,1539.678 376.25,1539.678 L382.5,1539.678 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="410" x="382.5" y="1564.4031"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="397.5" x="388.75" y="1580.6805">volatile 原子性：volatile 对单个读/写具有原子性（32位Long、Double），但是符合操作除外，例如 i++</text><path d="M351.25,1558.1531 L357.5,1558.1531 C366.875,1558.1531 366.875,1576.6281 376.25,1576.6281 L382.5,1576.6281 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M290,1705.9534 L296.25,1705.9534 C305.625,1705.9534 305.625,1558.1531 315,1558.1531 L321.25,1558.1531 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="321.25" y="1601.3531"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="327.5" y="1617.6306">实现机制</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="400" y="1601.3531"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="406.25" y="1617.6306">内存屏障</text><path d="M368.75,1613.5782 L375,1613.5782 C384.375,1613.5782 384.375,1613.5782 393.75,1613.5782 L400,1613.5782 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M290,1705.9534 L296.25,1705.9534 C305.625,1705.9534 305.625,1613.5782 315,1613.5782 L321.25,1613.5782 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="321.25" y="1656.7783"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="327.5" y="1673.0557">内存语义</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="380" x="400" y="1638.3032"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="367.5" x="406.25" y="1654.5807">当写一个 volatile 变量时，JMM 会把该线程对应的本地内存中的共享变量值立即刷新到主内存中</text><path d="M368.75,1669.0033 L375,1669.0033 C384.375,1669.0033 384.375,1650.5283 393.75,1650.5283 L400,1650.5283 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="406.25" x="400" y="1675.2533"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="393.75" x="406.25" y="1691.5308">当读一个 volatile 变量时，JMM 会把该线程对应的本地内存设置为无效，直接从主内存中读取共享变量</text><path d="M368.75,1669.0033 L375,1669.0033 C384.375,1669.0033 384.375,1687.4783 393.75,1687.4783 L400,1687.4783 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M290,1705.9534 L296.25,1705.9534 C305.625,1705.9534 305.625,1669.0033 315,1669.0033 L321.25,1669.0033 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="321.25" y="1749.1534"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="327.5" y="1765.4309">操作系统语义</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="161.25" x="417.5" y="1712.2034"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="148.75" x="423.75" y="1728.4808">主存、高速缓存（线程私有）缓存一致</text><path d="M386.25,1761.3785 L392.5,1761.3785 C401.875,1761.3785 401.875,1724.4284 411.25,1724.4284 L417.5,1724.4284 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="417.5" y="1767.6285"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="423.75" y="1783.9059">解决方案</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="123.75" x="496.25" y="1749.1534"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="111.25" x="502.5" y="1765.4309">通过在总线加 Lock 锁的方式</text><path d="M465,1779.8535 L471.25,1779.8535 C480.625,1779.8535 480.625,1761.3785 490,1761.3785 L496.25,1761.3785 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="128.75" x="496.25" y="1786.1035"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="116.25" x="502.5" y="1802.381">通过缓存一致性协议（MESI）</text><path d="M465,1779.8535 L471.25,1779.8535 C480.625,1779.8535 480.625,1798.3286 490,1798.3286 L496.25,1798.3286 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M386.25,1761.3785 L392.5,1761.3785 C401.875,1761.3785 401.875,1779.8535 411.25,1779.8535 L417.5,1779.8535 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M290,1705.9534 L296.25,1705.9534 C305.625,1705.9534 305.625,1761.3785 315,1761.3785 L321.25,1761.3785 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="321.25" y="1841.5286"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="327.5" y="1857.8061">内存模型</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="400" y="1823.0536"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="406.25" y="1839.3311">重排序</text><path d="M368.75,1853.7537 L375,1853.7537 C384.375,1853.7537 384.375,1835.2786 393.75,1835.2786 L400,1835.2786 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="75.625" x="400" y="1860.0037"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="63.125" x="406.25" y="1876.2811">happens-before</text><path d="M368.75,1853.7537 L375,1853.7537 C384.375,1853.7537 384.375,1872.2287 393.75,1872.2287 L400,1872.2287 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M290,1705.9534 L296.25,1705.9534 C305.625,1705.9534 305.625,1853.7537 315,1853.7537 L321.25,1853.7537 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M218.75,1040.8521 L225,1040.8521 C234.375,1040.8521 234.375,1705.9534 243.75,1705.9534 L250,1705.9534 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="250" y="1970.8539"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="256.25" y="1987.1313">dcl()</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="311.25" y="1896.9537"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="317.5" y="1913.2312">单例模式</text><path d="M280,1983.0789 L286.25,1983.0789 C295.625,1983.0789 295.625,1909.1788 305,1909.1788 L311.25,1909.1788 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="311.25" y="1952.3788"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="317.5" y="1968.6563">DCL</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="372.5" y="1933.9038"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="378.75" y="1950.1813">重排序</text><path d="M341.25,1964.6039 L347.5,1964.6039 C356.875,1964.6039 356.875,1946.1288 366.25,1946.1288 L372.5,1946.1288 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="75.625" x="372.5" y="1970.8539"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="63.125" x="378.75" y="1987.1313">happens-before</text><path d="M341.25,1964.6039 L347.5,1964.6039 C356.875,1964.6039 356.875,1983.0789 366.25,1983.0789 L372.5,1983.0789 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M280,1983.0789 L286.25,1983.0789 C295.625,1983.0789 295.625,1964.6039 305,1964.6039 L311.25,1964.6039 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="311.25" y="2026.279"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="317.5" y="2042.5565">解决方案</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="60" x="390" y="2007.804"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="47.5" x="396.25" y="2024.0814">volatile 方案</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="481.25" y="2007.804"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="487.5" y="2024.0814">禁止重排序</text><path d="M450,2020.029 L456.25,2020.029 C465.625,2020.029 465.625,2020.029 475,2020.029 L481.25,2020.029 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M358.75,2038.504 L365,2038.504 C374.375,2038.504 374.375,2020.029 383.75,2020.029 L390,2020.029 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="108.75" x="390" y="2044.754"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="96.25" x="396.25" y="2061.0315">基于类初始化的解决方案</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="605.625" x="530" y="2044.754"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="593.125" x="536.25" y="2061.0315">利用 ClassLoader 的机制来保证初始化 instance 时就只有一个线程，JVM 在类的初始化阶段会获得一个锁，这个锁可以同步多个线程对同一个类的初始话</text><path d="M498.75,2056.9791 L505,2056.9791 C514.375,2056.9791 514.375,2056.9791 523.75,2056.9791 L530,2056.9791 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M358.75,2038.504 L365,2038.504 C374.375,2038.504 374.375,2056.9791 383.75,2056.9791 L390,2056.9791 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M280,1983.0789 L286.25,1983.0789 C295.625,1983.0789 295.625,2038.504 305,2038.504 L311.25,2038.504 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M218.75,1040.8521 L225,1040.8521 C234.375,1040.8521 234.375,1983.0789 243.75,1983.0789 L250,1983.0789 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M74.375,4891.7973 L80.625,4891.7973 C90,4891.7973 90,1040.8521 99.375,1040.8521 L105.625,1040.8521 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="113.125" x="105.625" y="2469.6799"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="100.625" x="111.875" y="2485.9573">2. Java 内存模型（JMM）</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30.625" x="250" y="2340.3546"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="18.125" x="256.25" y="2356.6321">AQS</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="262.5" x="311.875" y="2081.7041"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="250" x="318.125" y="2097.9816">AbstractQueuedSynchronizer，同步器，实现 JUC 核心基础组件</text><path d="M280.625,2352.5797 L286.875,2352.5797 C296.25,2352.5797 296.25,2093.9291 305.625,2093.9291 L311.875,2093.9291 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="330" x="311.875" y="2118.6542"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="317.5" x="318.125" y="2134.9316">解决了子类实现同步器时涉及的大量细节问题，例如获取同步状态、FIFO同步队列</text><path d="M280.625,2352.5797 L286.875,2352.5797 C296.25,2352.5797 296.25,2130.8792 305.625,2130.8792 L311.875,2130.8792 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="374.375" x="311.875" y="2155.6042"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="361.875" x="318.125" y="2171.8817">采用模板模式，AQS 实现了大量通用方法，子类通过继承方式实现其抽象方法来管理同步状态</text><path d="M280.625,2352.5797 L286.875,2352.5797 C296.25,2352.5797 296.25,2167.8293 305.625,2167.8293 L311.875,2167.8293 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="66.875" x="311.875" y="2211.0294"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="54.375" x="318.125" y="2227.3068">CLH 同步队列</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="230.625" x="410" y="2192.5543"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="218.125" x="416.25" y="2208.8318">FIFO 双向队列，AQS 依赖它来解决同步状态的管理问题</text><path d="M378.75,2223.2544 L385,2223.2544 C394.375,2223.2544 394.375,2204.7794 403.75,2204.7794 L410,2204.7794 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="209.375" x="410" y="2229.5044"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="196.875" x="416.25" y="2245.7819">首节点唤醒，等待队列加入到 CLH 同步队列的尾部</text><path d="M378.75,2223.2544 L385,2223.2544 C394.375,2223.2544 394.375,2241.7294 403.75,2241.7294 L410,2241.7294 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M280.625,2352.5797 L286.875,2352.5797 C296.25,2352.5797 296.25,2223.2544 305.625,2223.2544 L311.875,2223.2544 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="91.25" x="311.875" y="2358.8297"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="78.75" x="318.125" y="2375.1071">同步状态获取与释放</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="434.375" y="2321.8796"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="440.625" y="2338.157">独占式</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="504.375" y="2303.4045"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="510.625" y="2319.682">获取锁</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="103.125" x="574.375" y="2266.4545"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="90.625" x="580.625" y="2282.7319">获取同步状态：acquire</text><path d="M543.125,2315.6296 L549.375,2315.6296 C558.75,2315.6296 558.75,2278.6795 568.125,2278.6795 L574.375,2278.6795 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="131.875" x="574.375" y="2303.4045"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="119.375" x="580.625" y="2319.682">响应中断：acquireInterruptibly</text><path d="M543.125,2315.6296 L549.375,2315.6296 C558.75,2315.6296 558.75,2315.6296 568.125,2315.6296 L574.375,2315.6296 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="121.25" x="574.375" y="2340.3546"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="108.75" x="580.625" y="2356.6321">超时获取：tryAcquireNanos</text><path d="M543.125,2315.6296 L549.375,2315.6296 C558.75,2315.6296 558.75,2352.5797 568.125,2352.5797 L574.375,2352.5797 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M473.125,2334.1046 L479.375,2334.1046 C488.75,2334.1046 488.75,2315.6296 498.125,2315.6296 L504.375,2315.6296 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="504.375" y="2377.3047"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="510.625" y="2393.5822">释放锁</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="41.875" x="574.375" y="2377.3047"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="29.375" x="580.625" y="2393.5822">release</text><path d="M543.125,2389.5297 L549.375,2389.5297 C558.75,2389.5297 558.75,2389.5297 568.125,2389.5297 L574.375,2389.5297 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M473.125,2334.1046 L479.375,2334.1046 C488.75,2334.1046 488.75,2389.5297 498.125,2389.5297 L504.375,2389.5297 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M403.125,2371.0547 L409.375,2371.0547 C418.75,2371.0547 418.75,2334.1046 428.125,2334.1046 L434.375,2334.1046 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="434.375" y="2432.7298"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="440.625" y="2449.0073">共享式</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="504.375" y="2414.2548"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="510.625" y="2430.5322">获取锁</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="70.625" x="574.375" y="2414.2548"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="58.125" x="580.625" y="2430.5322">acquireShared</text><path d="M543.125,2426.4798 L549.375,2426.4798 C558.75,2426.4798 558.75,2426.4798 568.125,2426.4798 L574.375,2426.4798 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M473.125,2444.9548 L479.375,2444.9548 C488.75,2444.9548 488.75,2426.4798 498.125,2426.4798 L504.375,2426.4798 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="504.375" y="2451.2048"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="510.625" y="2467.4823">释放锁</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="70.625" x="574.375" y="2451.2048"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="58.125" x="580.625" y="2467.4823">releaseShared</text><path d="M543.125,2463.4299 L549.375,2463.4299 C558.75,2463.4299 558.75,2463.4299 568.125,2463.4299 L574.375,2463.4299 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M473.125,2444.9548 L479.375,2444.9548 C488.75,2444.9548 488.75,2463.4299 498.125,2463.4299 L504.375,2463.4299 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M403.125,2371.0547 L409.375,2371.0547 C418.75,2371.0547 418.75,2444.9548 428.125,2444.9548 L434.375,2444.9548 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M280.625,2352.5797 L286.875,2352.5797 C296.25,2352.5797 296.25,2371.0547 305.625,2371.0547 L311.875,2371.0547 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="73.75" x="311.875" y="2543.58"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="61.25" x="318.125" y="2559.8575">线程阻塞与唤醒</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="336.875" x="416.875" y="2488.1549"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="324.375" x="423.125" y="2504.4324">当有线程获取锁了，其他再次获取时需要阻塞，当线程释放锁后，AQS负责唤醒线程</text><path d="M385.625,2555.8051 L391.875,2555.8051 C401.25,2555.8051 401.25,2500.3799 410.625,2500.3799 L416.875,2500.3799 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="62.5" x="416.875" y="2562.0551"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="50" x="423.125" y="2578.3325">LockSupport</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="196.25" x="510.625" y="2525.105"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="183.75" x="516.875" y="2541.3824">是用来创建锁和其他同步类的基本线程阻塞原语</text><path d="M479.375,2574.2801 L485.625,2574.2801 C495,2574.2801 495,2537.33 504.375,2537.33 L510.625,2537.33 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="741.25" x="510.625" y="2562.0551"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="728.75" x="516.875" y="2578.3325">每个使用 LockSupport 的线程都会与一个许可关联，如果该许可可用，并且可在进程中使用，则调用 park() 将会立即放回，否则可能阻塞，如果许可尚不可用，则可以调用 unpark 使其可用</text><path d="M479.375,2574.2801 L485.625,2574.2801 C495,2574.2801 495,2574.2801 504.375,2574.2801 L510.625,2574.2801 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="79.375" x="510.625" y="2599.0051"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="66.875" x="516.875" y="2615.2826">park()、unPark()</text><path d="M479.375,2574.2801 L485.625,2574.2801 C495,2574.2801 495,2611.2302 504.375,2611.2302 L510.625,2611.2302 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M385.625,2555.8051 L391.875,2555.8051 C401.25,2555.8051 401.25,2574.2801 410.625,2574.2801 L416.875,2574.2801 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M280.625,2352.5797 L286.875,2352.5797 C296.25,2352.5797 296.25,2555.8051 305.625,2555.8051 L311.875,2555.8051 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M218.75,2481.9049 L225,2481.9049 C234.375,2481.9049 234.375,2352.5797 243.75,2352.5797 L250,2352.5797 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="250" y="2746.8054"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="256.25" y="2763.0829">CAS</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="233.75" x="311.25" y="2635.9552"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="221.25" x="317.5" y="2652.2327">Compare And Swap，整个 JUC 体系最核心、最基础理论</text><path d="M280,2759.0305 L286.25,2759.0305 C295.625,2759.0305 295.625,2648.1802 305,2648.1802 L311.25,2648.1802 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="534.375" x="311.25" y="2672.9053"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="521.875" x="317.5" y="2689.1827">内存值 V 、旧的预期值A、要更新的值 B 、当且仅当内存值 V 的值等于旧的预期值 A 时才会将内存之 V 的值修改为 B，否则什么都不干</text><path d="M280,2759.0305 L286.25,2759.0305 C295.625,2759.0305 295.625,2685.1303 305,2685.1303 L311.25,2685.1303 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="100" x="311.25" y="2709.8553"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="317.5" y="2726.1328">native 中存在四个参数</text><path d="M280,2759.0305 L286.25,2759.0305 C295.625,2759.0305 295.625,2722.0804 305,2722.0804 L311.25,2722.0804 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="311.25" y="2802.2305"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="317.5" y="2818.508">缺陷</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="372.5" y="2746.8054"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="378.75" y="2763.0829">循环时间长</text><path d="M341.25,2814.4556 L347.5,2814.4556 C356.875,2814.4556 356.875,2759.0305 366.25,2759.0305 L372.5,2759.0305 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="135" x="372.5" y="2783.7555"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="122.5" x="378.75" y="2800.033">只能保证一个共享变量原子操作</text><path d="M341.25,2814.4556 L347.5,2814.4556 C356.875,2814.4556 356.875,2795.9805 366.25,2795.9805 L372.5,2795.9805 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="49.375" x="372.5" y="2839.1806"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="36.875" x="378.75" y="2855.4581">ABA 问题</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="453.125" y="2839.1806"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="459.375" y="2855.4581">解决方案</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="531.875" y="2820.7056"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="538.125" y="2836.983">版本号</text><path d="M500.625,2851.4056 L506.875,2851.4056 C516.25,2851.4056 516.25,2832.9306 525.625,2832.9306 L531.875,2832.9306 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="115" x="531.875" y="2857.6556"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="102.5" x="538.125" y="2873.9331">AtomicStampedReference</text><path d="M500.625,2851.4056 L506.875,2851.4056 C516.25,2851.4056 516.25,2869.8807 525.625,2869.8807 L531.875,2869.8807 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M421.875,2851.4056 L428.125,2851.4056 C437.5,2851.4056 437.5,2851.4056 446.875,2851.4056 L453.125,2851.4056 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M341.25,2814.4556 L347.5,2814.4556 C356.875,2814.4556 356.875,2851.4056 366.25,2851.4056 L372.5,2851.4056 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M280,2759.0305 L286.25,2759.0305 C295.625,2759.0305 295.625,2814.4556 305,2814.4556 L311.25,2814.4556 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M218.75,2481.9049 L225,2481.9049 C234.375,2481.9049 234.375,2759.0305 243.75,2759.0305 L250,2759.0305 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M74.375,4891.7973 L80.625,4891.7973 C90,4891.7973 90,2481.9049 99.375,2481.9049 L105.625,2481.9049 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="31.25" x="105.625" y="3042.406"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="18.75" x="111.875" y="3058.6835">3. 锁</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="70.625" x="168.125" y="2950.0308"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="58.125" x="174.375" y="2966.3083">ReentrantLock</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="170" x="270" y="2894.6057"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="157.5" x="276.25" y="2910.8832">可重入锁，是一种递归无阻塞的同步机制</text><path d="M238.75,2962.2559 L245,2962.2559 C254.375,2962.2559 254.375,2906.8307 263.75,2906.8307 L270,2906.8307 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="270.625" x="270" y="2931.5558"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="258.125" x="276.25" y="2947.8333">比 synchronized 更强大、灵活的锁机制，可以减少死锁发生的概率</text><path d="M238.75,2962.2559 L245,2962.2559 C254.375,2962.2559 254.375,2943.7808 263.75,2943.7808 L270,2943.7808 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="100" x="270" y="2968.5059"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="276.25" y="2984.7833">分为公平锁、非公平锁</text><path d="M238.75,2962.2559 L245,2962.2559 C254.375,2962.2559 254.375,2980.7309 263.75,2980.7309 L270,2980.7309 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="202.5" x="270" y="3005.4559"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="190" x="276.25" y="3021.7334">底层采用 CAS 实现，通过内部的 Sync 继承 AQS</text><path d="M238.75,2962.2559 L245,2962.2559 C254.375,2962.2559 254.375,3017.681 263.75,3017.681 L270,3017.681 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M136.875,3054.631 L143.125,3054.631 C152.5,3054.631 152.5,2962.2559 161.875,2962.2559 L168.125,2962.2559 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="112.5" x="168.125" y="3079.3561"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="100" x="174.375" y="3095.6335">ReentrantReadWriteLock</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="73.75" x="311.875" y="3060.881"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="61.25" x="318.125" y="3077.1585">读写锁，两把锁</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="416.875" y="3042.406"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="423.125" y="3058.6835">共享锁：读锁</text><path d="M385.625,3073.1061 L391.875,3073.1061 C401.25,3073.1061 401.25,3054.631 410.625,3054.631 L416.875,3054.631 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="416.875" y="3079.3561"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="423.125" y="3095.6335">排他锁：写锁</text><path d="M385.625,3073.1061 L391.875,3073.1061 C401.25,3073.1061 401.25,3091.5811 410.625,3091.5811 L416.875,3091.5811 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M280.625,3091.5811 L286.875,3091.5811 C296.25,3091.5811 296.25,3073.1061 305.625,3073.1061 L311.875,3073.1061 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="310" x="311.875" y="3116.3062"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="297.5" x="318.125" y="3132.5836">锁降级：遵循获取写锁、获取读锁在释放写锁的次序，写锁能够降级成为读锁</text><path d="M280.625,3091.5811 L286.875,3091.5811 C296.25,3091.5811 296.25,3128.5312 305.625,3128.5312 L311.875,3128.5312 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M136.875,3054.631 L143.125,3054.631 C152.5,3054.631 152.5,3091.5811 161.875,3091.5811 L168.125,3091.5811 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="50" x="168.125" y="3171.7313"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="37.5" x="174.375" y="3188.0087">Condition</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="275" x="249.375" y="3153.2562"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="262.5" x="255.625" y="3169.5337">Lock 提供条件 Condition，对线程的等待、唤醒操作更加详细和灵活</text><path d="M218.125,3183.9563 L224.375,3183.9563 C233.75,3183.9563 233.75,3165.4813 243.125,3165.4813 L249.375,3165.4813 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="526.875" x="249.375" y="3190.2063"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="514.375" x="255.625" y="3206.4838">内部维护一个 Condition 队列，当前线程调用 await() 方法，将会以当前线程构成一个节点（Node），并将接待你加入到该队列的尾部</text><path d="M218.125,3183.9563 L224.375,3183.9563 C233.75,3183.9563 233.75,3202.4313 243.125,3202.4313 L249.375,3202.4313 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M136.875,3054.631 L143.125,3054.631 C152.5,3054.631 152.5,3183.9563 161.875,3183.9563 L168.125,3183.9563 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M74.375,4891.7973 L80.625,4891.7973 C90,4891.7973 90,3054.631 99.375,3054.631 L105.625,3054.631 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="66.25" x="105.625" y="3518.9445"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="53.75" x="111.875" y="3535.222">4. 并发工具类</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="62.5" x="203.125" y="3282.5815"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="50" x="209.375" y="3298.8589">CyclicBarrier</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="315" x="296.875" y="3227.1564"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="302.5" x="303.125" y="3243.4338">它允许一组线程互相等待，直到到达某个公共屏障点（common barrier point）</text><path d="M265.625,3294.8065 L271.875,3294.8065 C281.25,3294.8065 281.25,3239.3814 290.625,3239.3814 L296.875,3239.3814 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="493.75" x="296.875" y="3264.1064"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="481.25" x="303.125" y="3280.3839">通俗讲：让一组线程达到一个屏障时被阻塞，知道最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会干活</text><path d="M265.625,3294.8065 L271.875,3294.8065 C281.25,3294.8065 281.25,3276.3315 290.625,3276.3315 L296.875,3276.3315 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="175.625" x="296.875" y="3301.0565"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="163.125" x="303.125" y="3317.334">底层采用 ReentrantLock + Condition 实现</text><path d="M265.625,3294.8065 L271.875,3294.8065 C281.25,3294.8065 281.25,3313.2816 290.625,3313.2816 L296.875,3313.2816 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="296.875" y="3338.0066"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="303.125" y="3354.2841">应用场景</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="310" x="375.625" y="3338.0066"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="297.5" x="381.875" y="3354.2841">多线程合并的操作结果，用于多线程计算数据，最后合并计算结果的应用场景</text><path d="M344.375,3350.2316 L350.625,3350.2316 C360,3350.2316 360,3350.2316 369.375,3350.2316 L375.625,3350.2316 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M265.625,3294.8065 L271.875,3294.8065 C281.25,3294.8065 281.25,3350.2316 290.625,3350.2316 L296.875,3350.2316 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M171.875,3531.1696 L178.125,3531.1696 C187.5,3531.1696 187.5,3294.8065 196.875,3294.8065 L203.125,3294.8065 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="80" x="203.125" y="3445.5943"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="67.5" x="209.375" y="3461.8718">CountDownLatch</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="327.5" x="314.375" y="3374.9567"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="315" x="320.625" y="3391.2341">在完成一组正在其他线程中执行的操作值钱，它允许调用一个或多个线程一直等待</text><path d="M283.125,3457.8194 L289.375,3457.8194 C298.75,3457.8194 298.75,3387.1817 308.125,3387.1817 L314.375,3387.1817 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="36.4001" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="617.5" x="314.375" y="3411.9067"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="506.25" x="320.625" y="3428.1842">用给定的计数器 初始化 CountDownLatch，由于调用 countDown() 放啊发，所以在技术其到达零之前，await() 方法会一直受阻塞。</text><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="602.5" x="323.125" y="3440.1343">之后，会释放所有等待的线程，await 的所有后续调用都将立即返回。这种现象只出现一次 -- 计数器无法被重置。如果需要被重新技术，请考虑 CyclicBarrier</text><path d="M283.125,3457.8194 L289.375,3457.8194 C298.75,3457.8194 298.75,3430.1068 308.125,3430.1068 L314.375,3430.1068 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="102.5" x="314.375" y="3479.2819"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="90" x="320.625" y="3495.5594">与 CyclicBarrier 的区别</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="466.25" x="448.125" y="3460.8069"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="453.75" x="454.375" y="3477.0844">CountDownLatch 的作用是允许 1 或者 N 个线程等待其他线程完成执行；而 CyclicBarrier 则是允许 N 个线程相互等待</text><path d="M416.875,3491.507 L423.125,3491.507 C432.5,3491.507 432.5,3473.0319 441.875,3473.0319 L448.125,3473.0319 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="452.5" x="448.125" y="3497.757"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="440" x="454.375" y="3514.0344">CountDownLatch 的计数器无法被重置；CyclicBarrier 的计数器可以被重置后使用，因此它被称为是循环的 barrier</text><path d="M416.875,3491.507 L423.125,3491.507 C432.5,3491.507 432.5,3509.982 441.875,3509.982 L448.125,3509.982 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M283.125,3457.8194 L289.375,3457.8194 C298.75,3457.8194 298.75,3491.507 308.125,3491.507 L314.375,3491.507 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="100" x="314.375" y="3516.232"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="320.625" y="3532.5095">内部采用共享锁来实现</text><path d="M283.125,3457.8194 L289.375,3457.8194 C298.75,3457.8194 298.75,3528.457 308.125,3528.457 L314.375,3528.457 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M171.875,3531.1696 L178.125,3531.1696 C187.5,3531.1696 187.5,3457.8194 196.875,3457.8194 L203.125,3457.8194 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="58.125" x="203.125" y="3639.0323"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="45.625" x="209.375" y="3655.3098">Semaphore</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="292.5" y="3553.1821"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="298.75" y="3569.4595">信号量</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="152.5" x="362.5" y="3553.1821"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="140" x="368.75" y="3569.4595">一个控制访问多个共享资源的计数器</text><path d="M331.25,3565.4071 L337.5,3565.4071 C346.875,3565.4071 346.875,3565.4071 356.25,3565.4071 L362.5,3565.4071 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M261.25,3651.2573 L267.5,3651.2573 C276.875,3651.2573 276.875,3565.4071 286.25,3565.4071 L292.5,3565.4071 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="36.4001" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="730" x="292.5" y="3590.1321"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="717.5" x="298.75" y="3606.4096">从概念上来讲，信号量维护了一个许可集。如果有必要，在许可可用前会阻塞每一个 acquire()，然后再获得许可。每一个 release() 添加一个许可，从而可能释放一个正在阻塞的获取者。</text><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="358.125" x="298.75" y="3618.3597">但是，不使用实际的许可对象，Samphore 只对可用许可的号码进行技术，并采取相应的行动</text><path d="M261.25,3651.2573 L267.5,3651.2573 C276.875,3651.2573 276.875,3608.3322 286.25,3608.3322 L292.5,3608.3322 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="36.4001" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="693.75" x="292.5" y="3639.0323"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="531.875" x="298.75" y="3655.3098">信号量 Samphore 是一个非负整数（ &gt;=1 ）。当一个线程想要访问某个共享资源是，它必须先获取 Semaphore ，当 Semaphore &gt; 0 时，</text><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="678.75" x="301.25" y="3667.2598">获取该资源并使 Semaphore -1。如果 Semaphore = 0，则表示全部的共享资源已经被其他线程全部占用，线程必须等待其他线程释放资源。当线程释放资源时，Semaphore +1</text><path d="M261.25,3651.2573 L267.5,3651.2573 C276.875,3651.2573 276.875,3657.2324 286.25,3657.2324 L292.5,3657.2324 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="292.5" y="3687.9324"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="298.75" y="3704.2099">应用场景</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="240" x="371.25" y="3687.9324"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="227.5" x="377.5" y="3704.2099">通常用于限制可以访问某些资源（物理或逻辑的）线程数目</text><path d="M340,3700.1575 L346.25,3700.1575 C355.625,3700.1575 355.625,3700.1575 365,3700.1575 L371.25,3700.1575 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M261.25,3651.2573 L267.5,3651.2573 C276.875,3651.2573 276.875,3700.1575 286.25,3700.1575 L292.5,3700.1575 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="91.25" x="292.5" y="3724.8825"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="78.75" x="298.75" y="3741.16">内部采用共享锁实现</text><path d="M261.25,3651.2573 L267.5,3651.2573 C276.875,3651.2573 276.875,3737.1075 286.25,3737.1075 L292.5,3737.1075 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M171.875,3531.1696 L178.125,3531.1696 C187.5,3531.1696 187.5,3651.2573 196.875,3651.2573 L203.125,3651.2573 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="54.375" x="203.125" y="3786.2827"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="41.875" x="209.375" y="3802.5601">Exchanger</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="205" x="288.75" y="3761.8326"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="192.5" x="295" y="3778.11">可以在对中对元素进行配对和交换的线程的同步点</text><path d="M257.5,3798.5077 L263.75,3798.5077 C273.125,3798.5077 273.125,3774.0576 282.5,3774.0576 L288.75,3774.0576 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="36.4001" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="607.5" x="288.75" y="3798.7827"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="350.625" x="295" y="3815.0601">允许在并发任务直中交换数据，具体来说，Exchanger 类允许在两个线程之间定义同步点。</text><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="595" x="295" y="3827.0102">当两个线程都到到同步点时，他们交换数据结构，因此第一个线程的数据结构进入到第二个线程的数据结构中，第二个线程的数据结构进入到第一个线程中</text><path d="M257.5,3798.5077 L263.75,3798.5077 C273.125,3798.5077 273.125,3816.9827 282.5,3816.9827 L288.75,3816.9827 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M171.875,3531.1696 L178.125,3531.1696 C187.5,3531.1696 187.5,3798.5077 196.875,3798.5077 L203.125,3798.5077 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M74.375,4891.7973 L80.625,4891.7973 C90,4891.7973 90,3531.1696 99.375,3531.1696 L105.625,3531.1696 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="40" x="105.625" y="4241.6336"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="27.5" x="111.875" y="4257.9111">5. 其他</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="62.5" x="176.875" y="4075.3583"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="50" x="183.125" y="4091.6357">ThreadLocal</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="36.4001" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="555" x="270.625" y="3847.6828"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="271.25" x="276.875" y="3863.9603">一种解决多线程环境下成员变量的问题的方案，但是与线程同步无关。</text><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="542.5" x="276.875" y="3875.9103">其思路是为每一个线程创建一个单独的变量副本，从而每个线程都可以独立的改变自己所拥有的变量副本，而不会改变其他线程所对应的副本</text><path d="M239.375,4087.5833 L245.625,4087.5833 C255,4087.5833 255,3865.8829 264.375,3865.8829 L270.625,3865.8829 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="553.125" x="270.625" y="3896.5829"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="540.625" x="276.875" y="3912.8604">ThreadLocal 不是用于解决共享变量的问题id额，也不是为了协调线程同步而存在，而是为了方便每个线程处理自己的状态而引入的一个机制</text><path d="M239.375,4087.5833 L245.625,4087.5833 C255,4087.5833 255,3908.808 264.375,3908.808 L270.625,3908.808 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="270.625" y="3988.9581"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="276.875" y="4005.2356">四个方法</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="185" x="349.375" y="3933.533"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="172.5" x="355.625" y="3949.8105">get(): 返回此线程局部变量的当前副本中的值</text><path d="M318.125,4001.1832 L324.375,4001.1832 C333.75,4001.1832 333.75,3945.7581 343.125,3945.7581 L349.375,3945.7581 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="228.125" x="349.375" y="3970.4831"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="215.625" x="355.625" y="3986.7606">initiaValue(): 返回此线程局部变量的当前线程的“初始值”</text><path d="M318.125,4001.1832 L324.375,4001.1832 C333.75,4001.1832 333.75,3982.7081 343.125,3982.7081 L349.375,3982.7081 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="193.125" x="349.375" y="4007.4332"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="180.625" x="355.625" y="4023.7106">remove() ： 移除此线程局部变量当前线程的值</text><path d="M318.125,4001.1832 L324.375,4001.1832 C333.75,4001.1832 333.75,4019.6582 343.125,4019.6582 L349.375,4019.6582 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="281.25" x="349.375" y="4044.3832"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="268.75" x="355.625" y="4060.6607">set(T value) ：将此线程局部变量的当前线程副本中的值设置为指定值</text><path d="M318.125,4001.1832 L324.375,4001.1832 C333.75,4001.1832 333.75,4056.6083 343.125,4056.6083 L349.375,4056.6083 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M239.375,4087.5833 L245.625,4087.5833 C255,4087.5833 255,4001.1832 264.375,4001.1832 L270.625,4001.1832 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="79.375" x="270.625" y="4118.2834"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="66.875" x="276.875" y="4134.5609">ThreadLocalMap</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="108.75" x="381.25" y="4081.3333"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="96.25" x="387.5" y="4097.6108">实现线程隔离机制的关键</text><path d="M350,4130.5084 L356.25,4130.5084 C365.625,4130.5084 365.625,4093.5583 375,4093.5583 L381.25,4093.5583 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="476.25" x="381.25" y="4118.2834"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="463.75" x="387.5" y="4134.5609">每个 Thread 内部都有一个 Threadlocal.ThreadLocalMap 类型中的成员，该成员用来存储实际的 ThreadLocal 变量副本</text><path d="M350,4130.5084 L356.25,4130.5084 C365.625,4130.5084 365.625,4130.5084 375,4130.5084 L381.25,4130.5084 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="492.5" x="381.25" y="4155.2335"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="480" x="387.5" y="4171.5109">提供了一种用键值对方式存储每一个线程的变量副本的方法，key 为当前 ThreadLocal 对象，value 则是对应线程的变量副本</text><path d="M350,4130.5084 L356.25,4130.5084 C365.625,4130.5084 365.625,4167.4585 375,4167.4585 L381.25,4167.4585 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M239.375,4087.5833 L245.625,4087.5833 C255,4087.5833 255,4130.5084 264.375,4130.5084 L270.625,4130.5084 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="270.625" y="4210.6586"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="276.875" y="4226.936">注意点</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="343.75" x="340.625" y="4192.1835"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="331.25" x="346.875" y="4208.461">ThreadLocal 实例本身是不存储值，它只是提供了一个在当前线程中找到副本值的 key</text><path d="M309.375,4222.8836 L315.625,4222.8836 C325,4222.8836 325,4204.4086 334.375,4204.4086 L340.625,4204.4086 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="303.75" x="340.625" y="4229.1336"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="291.25" x="346.875" y="4245.4111">是 ThreadLocal 包含在 Thread 中，而不是 Thread 包含在 ThreadLocal 中</text><path d="M309.375,4222.8836 L315.625,4222.8836 C325,4222.8836 325,4241.3586 334.375,4241.3586 L340.625,4241.3586 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M239.375,4087.5833 L245.625,4087.5833 C255,4087.5833 255,4222.8836 264.375,4222.8836 L270.625,4222.8836 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="270.625" y="4284.5587"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="276.875" y="4300.8362">内存泄漏问题</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="76.25" x="366.875" y="4266.0837"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="63.75" x="373.125" y="4282.3611">ThreadlocalMap</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="157.5" x="474.375" y="4266.0837"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="145" x="480.625" y="4282.3611">key 弱引用，value 强引用，无法回收</text><path d="M443.125,4278.3087 L449.375,4278.3087 C458.75,4278.3087 458.75,4278.3087 468.125,4278.3087 L474.375,4278.3087 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M335.625,4296.7838 L341.875,4296.7838 C351.25,4296.7838 351.25,4278.3087 360.625,4278.3087 L366.875,4278.3087 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="85.625" x="366.875" y="4303.0338"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="73.125" x="373.125" y="4319.3112">显示调用 remove()</text><path d="M335.625,4296.7838 L341.875,4296.7838 C351.25,4296.7838 351.25,4315.2588 360.625,4315.2588 L366.875,4315.2588 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M239.375,4087.5833 L245.625,4087.5833 C255,4087.5833 255,4296.7838 264.375,4296.7838 L270.625,4296.7838 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M145.625,4253.8586 L151.875,4253.8586 C161.25,4253.8586 161.25,4087.5833 170.625,4087.5833 L176.875,4087.5833 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="48.75" x="176.875" y="4487.7841"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="36.25" x="183.125" y="4504.0616">Fork/Join</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="476.25" x="256.875" y="4339.9838"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="463.75" x="263.125" y="4356.2613">一个用于并行执行任务的框架，是一个把大任务分割成若干个小人物，最终汇总每个小任务结果后得到大人物结果的框架</text><path d="M225.625,4500.0092 L231.875,4500.0092 C241.25,4500.0092 241.25,4352.2089 250.625,4352.2089 L256.875,4352.2089 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="256.875" y="4395.4089"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="263.125" y="4411.6864">核心思想</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="36.25" x="335.625" y="4376.9339"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="23.75" x="341.875" y="4393.2114">“分治”</text><path d="M304.375,4407.634 L310.625,4407.634 C320,4407.634 320,4389.1589 329.375,4389.1589 L335.625,4389.1589 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="125" x="335.625" y="4413.884"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="112.5" x="341.875" y="4430.1614">fork 分级任务，join 收集数据</text><path d="M304.375,4407.634 L310.625,4407.634 C320,4407.634 320,4426.109 329.375,4426.109 L335.625,4426.109 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M225.625,4500.0092 L231.875,4500.0092 C241.25,4500.0092 241.25,4407.634 250.625,4407.634 L256.875,4407.634 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="256.875" y="4487.7841"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="263.125" y="4504.0616">工作窃取</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="161.25" x="335.625" y="4450.834"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="148.75" x="341.875" y="4467.1115">某个线程从其他队列里窃取任务来执行</text><path d="M304.375,4500.0092 L310.625,4500.0092 C320,4500.0092 320,4463.0591 329.375,4463.0591 L335.625,4463.0591 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="248.75" x="335.625" y="4487.7841"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="236.25" x="341.875" y="4504.0616">执行快的线程帮助执行慢的线程执行任务，提升整体任务效率</text><path d="M304.375,4500.0092 L310.625,4500.0092 C320,4500.0092 320,4500.0092 329.375,4500.0092 L335.625,4500.0092 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="91.25" x="335.625" y="4524.7342"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="78.75" x="341.875" y="4541.0117">队列要采用双向队列</text><path d="M304.375,4500.0092 L310.625,4500.0092 C320,4500.0092 320,4536.9592 329.375,4536.9592 L335.625,4536.9592 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M225.625,4500.0092 L231.875,4500.0092 C241.25,4500.0092 241.25,4500.0092 250.625,4500.0092 L256.875,4500.0092 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="256.875" y="4598.6343"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="263.125" y="4614.9118">核心类</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="63.75" x="326.875" y="4561.6843"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="51.25" x="333.125" y="4577.9617">ForkJoinPool</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="82.5" x="421.875" y="4561.6843"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="70" x="428.125" y="4577.9617">执行任务的线程池</text><path d="M390.625,4573.9093 L396.875,4573.9093 C406.25,4573.9093 406.25,4573.9093 415.625,4573.9093 L421.875,4573.9093 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M295.625,4610.8594 L301.875,4610.8594 C311.25,4610.8594 311.25,4573.9093 320.625,4573.9093 L326.875,4573.9093 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65.625" x="326.875" y="4598.6343"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="53.125" x="333.125" y="4614.9118">ForkJoinTask</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="173.75" x="423.75" y="4598.6343"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="161.25" x="430" y="4614.9118">表示任务，用于 ForkJoinPool 的任务抽象</text><path d="M392.5,4610.8594 L398.75,4610.8594 C408.125,4610.8594 408.125,4610.8594 417.5,4610.8594 L423.75,4610.8594 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M295.625,4610.8594 L301.875,4610.8594 C311.25,4610.8594 311.25,4610.8594 320.625,4610.8594 L326.875,4610.8594 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="103.75" x="326.875" y="4635.5844"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="91.25" x="333.125" y="4651.8619">ForkJoinWorkerThread</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="91.25" x="461.875" y="4635.5844"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="78.75" x="468.125" y="4651.8619">执行任务的工作线程</text><path d="M430.625,4647.8094 L436.875,4647.8094 C446.25,4647.8094 446.25,4647.8094 455.625,4647.8094 L461.875,4647.8094 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M295.625,4610.8594 L301.875,4610.8594 C311.25,4610.8594 311.25,4647.8094 320.625,4647.8094 L326.875,4647.8094 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M225.625,4500.0092 L231.875,4500.0092 C241.25,4500.0092 241.25,4610.8594 250.625,4610.8594 L256.875,4610.8594 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M145.625,4253.8586 L151.875,4253.8586 C161.25,4253.8586 161.25,4500.0092 170.625,4500.0092 L176.875,4500.0092 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M74.375,4891.7973 L80.625,4891.7973 C90,4891.7973 90,4253.8586 99.375,4253.8586 L105.625,4253.8586 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="78.125" x="105.625" y="5528.3612"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="65.625" x="111.875" y="5544.6387">6. Java 并发集合</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="93.75" x="215" y="5208.3105"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="81.25" x="221.25" y="5224.588">ConcurrentHashMap</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="349.375" x="340" y="4672.5345"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="336.875" x="346.25" y="4688.812">CAS + Synchronized 来保证并发更新的安全，底层采用 数组 + 链表/红黑树 的存储结构</text><path d="M308.75,5220.5356 L315,5220.5356 C324.375,5220.5356 324.375,4684.7595 333.75,4684.7595 L340,4684.7595 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="340" y="4857.2849"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="346.25" y="4873.5623">重要内部类</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="33.125" x="427.5" y="4709.4846"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="20.625" x="433.75" y="4725.762">Node</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="76.875" x="491.875" y="4709.4846"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="64.375" x="498.125" y="4725.762">key-value键值对</text><path d="M460.625,4721.7096 L466.875,4721.7096 C476.25,4721.7096 476.25,4721.7096 485.625,4721.7096 L491.875,4721.7096 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M396.25,4869.5099 L402.5,4869.5099 C411.875,4869.5099 411.875,4721.7096 421.25,4721.7096 L427.5,4721.7096 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="51.875" x="427.5" y="4746.4346"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="39.375" x="433.75" y="4762.7121">TreeNode</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="510.625" y="4746.4346"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="516.875" y="4762.7121">红黑树节点</text><path d="M479.375,4758.6597 L485.625,4758.6597 C495,4758.6597 495,4758.6597 504.375,4758.6597 L510.625,4758.6597 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M396.25,4869.5099 L402.5,4869.5099 C411.875,4869.5099 411.875,4758.6597 421.25,4758.6597 L427.5,4758.6597 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="43.75" x="427.5" y="4783.3847"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="31.25" x="433.75" y="4799.6622">TreeBin</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="248.75" x="502.5" y="4783.3847"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="236.25" x="508.75" y="4799.6622">就相当于一个红黑树，其构造方法其实就是构造红黑树的过程</text><path d="M471.25,4795.6097 L477.5,4795.6097 C486.875,4795.6097 486.875,4795.6097 496.25,4795.6097 L502.5,4795.6097 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M396.25,4869.5099 L402.5,4869.5099 C411.875,4869.5099 411.875,4795.6097 421.25,4795.6097 L427.5,4795.6097 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="77.5" x="427.5" y="4912.71"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="65" x="433.75" y="4928.9874">ForwardingNode</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="195" x="536.25" y="4820.3348"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="182.5" x="542.5" y="4836.6122">辅助节点，用于 ConcurrentHashMap 扩容操作</text><path d="M505,4924.935 L511.25,4924.935 C520.625,4924.935 520.625,4832.5598 530,4832.5598 L536.25,4832.5598 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.125" x="536.25" y="4931.185"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="25.625" x="542.5" y="4947.4625">sizeCtl</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="203.125" x="605.625" y="4857.2849"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="190.625" x="611.875" y="4873.5623">控制标识符，用来控制 table 初始化和扩容操作的</text><path d="M574.375,4943.41 L580.625,4943.41 C590,4943.41 590,4869.5099 599.375,4869.5099 L605.625,4869.5099 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="605.625" y="4949.66"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="611.875" y="4965.9375">含义</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="152.5" x="666.875" y="4894.2349"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="140" x="673.125" y="4910.5124">负数代表正在进行初始化或扩容操作</text><path d="M635.625,4961.8851 L641.875,4961.8851 C651.25,4961.8851 651.25,4906.46 660.625,4906.46 L666.875,4906.46 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="66.875" x="666.875" y="4931.185"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="54.375" x="673.125" y="4947.4625">-1 代表初始化</text><path d="M635.625,4961.8851 L641.875,4961.8851 C651.25,4961.8851 651.25,4943.41 660.625,4943.41 L666.875,4943.41 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="165" x="666.875" y="4968.1351"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="152.5" x="673.125" y="4984.4125">-N 表示有 N-1 个线程正在进行扩容操作</text><path d="M635.625,4961.8851 L641.875,4961.8851 C651.25,4961.8851 651.25,4980.3601 660.625,4980.3601 L666.875,4980.3601 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="343.125" x="666.875" y="5005.0851"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="330.625" x="673.125" y="5021.3626">正数或零代表 hash 表还没有被初始化，这个数值表示初始化或进行下一次扩容的大小</text><path d="M635.625,4961.8851 L641.875,4961.8851 C651.25,4961.8851 651.25,5017.3102 660.625,5017.3102 L666.875,5017.3102 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M574.375,4943.41 L580.625,4943.41 C590,4943.41 590,4961.8851 599.375,4961.8851 L605.625,4961.8851 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M505,4924.935 L511.25,4924.935 C520.625,4924.935 520.625,4943.41 530,4943.41 L536.25,4943.41 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M396.25,4869.5099 L402.5,4869.5099 C411.875,4869.5099 411.875,4924.935 421.25,4924.935 L427.5,4924.935 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M308.75,5220.5356 L315,5220.5356 C324.375,5220.5356 324.375,4869.5099 333.75,4869.5099 L340,4869.5099 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="340" y="5374.5859"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="346.25" y="5390.8633">重要操作</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="46.25" x="418.75" y="5134.4104"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="33.75" x="425" y="5150.6879">initTable</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="140" x="496.25" y="5042.0352"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="127.5" x="502.5" y="5058.3127">ConcurrentHashMap 初始化方法</text><path d="M465,5146.6354 L471.25,5146.6354 C480.625,5146.6354 480.625,5054.2603 490,5054.2603 L496.25,5054.2603 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="213.75" x="496.25" y="5078.9853"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="201.25" x="502.5" y="5095.2628">只能由一个线程参与初始化过程，其他线程必须挂起</text><path d="M465,5146.6354 L471.25,5146.6354 C480.625,5146.6354 480.625,5091.2103 490,5091.2103 L496.25,5091.2103 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="240" x="496.25" y="5115.9354"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="227.5" x="502.5" y="5132.2128">构造函数不做初始化过程，初始化真正的是 put 操作中出发</text><path d="M465,5146.6354 L471.25,5146.6354 C480.625,5146.6354 480.625,5128.1604 490,5128.1604 L496.25,5128.1604 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="496.25" y="5189.8355"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="502.5" y="5206.113">步骤</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="178.125" x="557.5" y="5152.8854"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="165.625" x="563.75" y="5169.1629">sizeCtl &lt; 0 表示正在进行初始化，线程挂起</text><path d="M526.25,5202.0605 L532.5,5202.0605 C541.875,5202.0605 541.875,5165.1105 551.25,5165.1105 L557.5,5165.1105 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="246.25" x="557.5" y="5189.8355"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="233.75" x="563.75" y="5206.113">线程获取初始化资格（CAS(sizeCtl, sc, -1)）进行初始化过程</text><path d="M526.25,5202.0605 L532.5,5202.0605 C541.875,5202.0605 541.875,5202.0605 551.25,5202.0605 L557.5,5202.0605 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="356.25" x="557.5" y="5226.7856"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="343.75" x="563.75" y="5243.063">初始化步骤完成以后，设置 sizeCtl = 0.75*n (下一次扩容的阈值)，表示下一次扩容的大小</text><path d="M526.25,5202.0605 L532.5,5202.0605 C541.875,5202.0605 541.875,5239.0106 551.25,5239.0106 L557.5,5239.0106 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M465,5146.6354 L471.25,5146.6354 C480.625,5146.6354 480.625,5202.0605 490,5202.0605 L496.25,5202.0605 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M387.5,5386.8109 L393.75,5386.8109 C403.125,5386.8109 403.125,5146.6354 412.5,5146.6354 L418.75,5146.6354 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="25" x="418.75" y="5356.1108"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="12.5" x="425" y="5372.3883">put</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="475" y="5282.2107"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="481.25" y="5298.4882">核心思想</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="402.5" x="553.75" y="5263.7357"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="390" x="560" y="5280.0131">根据 hash 值计算节点插入在 table 的位置，如果该位置为空，则直接插入，否则插入到链表或者树中</text><path d="M522.5,5294.4357 L528.75,5294.4357 C538.125,5294.4357 538.125,5275.9607 547.5,5275.9607 L553.75,5275.9607 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="82.5" x="553.75" y="5300.6857"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="70" x="560" y="5316.9632">真是情况较为复杂</text><path d="M522.5,5294.4357 L528.75,5294.4357 C538.125,5294.4357 538.125,5312.9108 547.5,5312.9108 L553.75,5312.9108 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M443.75,5368.3359 L450,5368.3359 C459.375,5368.3359 459.375,5294.4357 468.75,5294.4357 L475,5294.4357 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="475" y="5393.0609"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="481.25" y="5409.3384">步骤</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="326.875" x="536.25" y="5337.6358"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="314.375" x="542.5" y="5353.9133">table 为 null, 线程进入初始化步骤，如果有其他线程正在进行初始化，该线程挂起</text><path d="M505,5405.2859 L511.25,5405.2859 C520.625,5405.2859 520.625,5349.8608 530,5349.8608 L536.25,5349.8608 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="661.875" x="536.25" y="5374.5859"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="649.375" x="542.5" y="5390.8633">如果插入的当前 i 位置为 null，说明该位置是第一次插入，利用 CAS 插入节点即可，插入成功，则调用 addCount 判断是否需要扩容。若插入失败，则继续匹配（自旋）</text><path d="M505,5405.2859 L511.25,5405.2859 C520.625,5405.2859 520.625,5386.8109 530,5386.8109 L536.25,5386.8109 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="325" x="536.25" y="5411.5359"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="312.5" x="542.5" y="5427.8134">若该节点的 hash == MOVED(-1) ，表示有线程正在进行扩容，则进入扩容进程中</text><path d="M505,5405.2859 L511.25,5405.2859 C520.625,5405.2859 520.625,5423.761 530,5423.761 L536.25,5423.761 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="363.125" x="536.25" y="5448.486"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="350.625" x="542.5" y="5464.7635">其余情况就是按照链表或者红黑树结构插入节点，但是这个过程需要加锁（Synchronized）</text><path d="M505,5405.2859 L511.25,5405.2859 C520.625,5405.2859 520.625,5460.7111 530,5460.7111 L536.25,5460.7111 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M443.75,5368.3359 L450,5368.3359 C459.375,5368.3359 459.375,5405.2859 468.75,5405.2859 L475,5405.2859 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M387.5,5386.8109 L393.75,5386.8109 C403.125,5386.8109 403.125,5368.3359 412.5,5368.3359 L418.75,5368.3359 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="25" x="418.75" y="5503.9111"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="12.5" x="425" y="5520.1886">get</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="475" y="5503.9111"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="481.25" y="5520.1886">步骤</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="108.125" x="536.25" y="5485.4361"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="95.625" x="542.5" y="5501.7136">table == null; return null;</text><path d="M505,5516.1362 L511.25,5516.1362 C520.625,5516.1362 520.625,5497.6611 530,5497.6611 L536.25,5497.6611 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="107.5" x="536.25" y="5522.3862"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="95" x="542.5" y="5538.6636">从 链表/红黑树 节点获取</text><path d="M505,5516.1362 L511.25,5516.1362 C520.625,5516.1362 520.625,5534.6112 530,5534.6112 L536.25,5534.6112 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M443.75,5516.1362 L450,5516.1362 C459.375,5516.1362 459.375,5516.1362 468.75,5516.1362 L475,5516.1362 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M387.5,5386.8109 L393.75,5386.8109 C403.125,5386.8109 403.125,5516.1362 412.5,5516.1362 L418.75,5516.1362 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="418.75" y="5596.2863"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="425" y="5612.5638">扩容</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="480" y="5559.3362"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="486.25" y="5575.6137">多线程扩容</text><path d="M448.75,5608.5114 L455,5608.5114 C464.375,5608.5114 464.375,5571.5613 473.75,5571.5613 L480,5571.5613 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="480" y="5614.7614"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="486.25" y="5631.0388">步骤</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="316.25" x="541.25" y="5596.2863"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="303.75" x="547.5" y="5612.5638">构建一个 nextTable，其大小为原来的两倍，这个步骤是在单线程环境下完成的</text><path d="M510,5626.9864 L516.25,5626.9864 C525.625,5626.9864 525.625,5608.5114 535,5608.5114 L541.25,5608.5114 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="299.375" x="541.25" y="5633.2364"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="286.875" x="547.5" y="5649.5139">将原来 table 里边的内容复制到 nextTable 中，这个步骤是允许多线程操作</text><path d="M510,5626.9864 L516.25,5626.9864 C525.625,5626.9864 525.625,5645.4614 535,5645.4614 L541.25,5645.4614 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M448.75,5608.5114 L455,5608.5114 C464.375,5608.5114 464.375,5626.9864 473.75,5626.9864 L480,5626.9864 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M387.5,5386.8109 L393.75,5386.8109 C403.125,5386.8109 403.125,5608.5114 412.5,5608.5114 L418.75,5608.5114 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="100" x="418.75" y="5688.6615"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="425" y="5704.939">链表转化为红黑树过程</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="241.25" x="550" y="5670.1865"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="228.75" x="556.25" y="5686.4639">所在链表的元素个数达到了阈值 8 ，则将链表转换为红黑树</text><path d="M518.75,5700.8865 L525,5700.8865 C534.375,5700.8865 534.375,5682.4115 543.75,5682.4115 L550,5682.4115 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="550" y="5707.1365"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="556.25" y="5723.414">红黑树算法</text><path d="M518.75,5700.8865 L525,5700.8865 C534.375,5700.8865 534.375,5719.3616 543.75,5719.3616 L550,5719.3616 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M387.5,5386.8109 L393.75,5386.8109 C403.125,5386.8109 403.125,5700.8865 412.5,5700.8865 L418.75,5700.8865 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M308.75,5220.5356 L315,5220.5356 C324.375,5220.5356 324.375,5386.8109 333.75,5386.8109 L340,5386.8109 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="80" x="340" y="5744.0866"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="67.5" x="346.25" y="5760.3641">1.7 和 1.8 的区别</text><path d="M308.75,5220.5356 L315,5220.5356 C324.375,5220.5356 324.375,5756.3116 333.75,5756.3116 L340,5756.3116 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M183.75,5540.5862 L190,5540.5862 C199.375,5540.5862 199.375,5220.5356 208.75,5220.5356 L215,5220.5356 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="110" x="215" y="5910.3619"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="97.5" x="221.25" y="5926.6394">ConcurrentLinkedQueue</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="375" x="356.25" y="5781.0367"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="362.5" x="362.5" y="5797.3141">基于链接节点的无边界的线程安全队列，采用 FIFO 原则对元素进行排序，内部采用 CAS 算法</text><path d="M325,5922.587 L331.25,5922.587 C340.625,5922.587 340.625,5793.2617 350,5793.2617 L356.25,5793.2617 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="356.25" y="5873.4119"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="362.5" y="5889.6893">不变性</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="155" x="426.25" y="5817.9868"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="142.5" x="432.5" y="5834.2642">在入队的最后一个元素的 next 为 null</text><path d="M395,5885.6369 L401.25,5885.6369 C410.625,5885.6369 410.625,5830.2118 420,5830.2118 L426.25,5830.2118 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="302.5" x="426.25" y="5854.9368"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="290" x="432.5" y="5871.2143">队列中所有未删除的节点的 item 都不能为 null，且都能从 head 节点遍历到</text><path d="M395,5885.6369 L401.25,5885.6369 C410.625,5885.6369 410.625,5867.1619 420,5867.1619 L426.25,5867.1619 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="456.25" x="426.25" y="5891.8869"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="443.75" x="432.5" y="5908.1644">对于要删除的节点，不是直接将其设置为 null，而是将其 item 值设置为 null，（迭代器会跳过 item 为 null 的节点）</text><path d="M395,5885.6369 L401.25,5885.6369 C410.625,5885.6369 410.625,5904.1119 420,5904.1119 L426.25,5904.1119 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="466.25" x="426.25" y="5928.837"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="453.75" x="432.5" y="5945.1144">允许 head 和 tail 更新之后。这是什么意思呢？意思是说 head、tail 不总只想第一个元素和最后一个元素（后面阐述）</text><path d="M395,5885.6369 L401.25,5885.6369 C410.625,5885.6369 410.625,5941.062 420,5941.062 L426.25,5941.062 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M325,5922.587 L331.25,5922.587 C340.625,5922.587 340.625,5885.6369 350,5885.6369 L356.25,5885.6369 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="105" x="356.25" y="5965.787"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="92.5" x="362.5" y="5982.0645">head 的不变性和可变性</text><path d="M325,5922.587 L331.25,5922.587 C340.625,5922.587 340.625,5978.0121 350,5978.0121 L356.25,5978.0121 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="96.25" x="356.25" y="6002.7371"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="83.75" x="362.5" y="6019.0146">tail 的不变性和可变性</text><path d="M325,5922.587 L331.25,5922.587 C340.625,5922.587 340.625,6014.9622 350,6014.9622 L356.25,6014.9622 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="358.75" x="356.25" y="6039.6872"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="346.25" x="362.5" y="6055.9647">精妙之处：利用 CAS 来完成数据操作，同时允许队列的不一致性，弱一致性表现淋漓尽致</text><path d="M325,5922.587 L331.25,5922.587 C340.625,5922.587 340.625,6051.9122 350,6051.9122 L356.25,6051.9122 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M183.75,5540.5862 L190,5540.5862 C199.375,5540.5862 199.375,5922.587 208.75,5922.587 L215,5922.587 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="104.375" x="215" y="6230.4126"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="91.875" x="221.25" y="6246.6901">ConcurrentSkipListMap</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="185" x="350.625" y="6076.6373"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="172.5" x="356.875" y="6092.9147">第三种 key-value 数据结构：SkipList( 跳表 )</text><path d="M319.375,6242.6376 L325.625,6242.6376 C335,6242.6376 335,6088.8623 344.375,6088.8623 L350.625,6088.8623 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="41.875" x="350.625" y="6248.8876"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="29.375" x="356.875" y="6265.1651">skipList</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="423.75" y="6113.5873"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="430" y="6129.8648">平衡二叉树</text><path d="M392.5,6261.1127 L398.75,6261.1127 C408.125,6261.1127 408.125,6125.8124 417.5,6125.8124 L423.75,6125.8124 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="36.4001" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="498.75" x="423.75" y="6150.5374"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="486.25" x="430" y="6166.8149">SkipList 让已排序的数据分布在多层链表中，以 0-1 随机数决定一个数据的向上攀升与否，通过“空间来换取时间”的一个算法，</text><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="411.25" x="432.5" y="6178.765">在每个节点中增加了向前的指针，在插入、删除、查找是可以忽略一些不可能涉及的结点，从而提高了效率</text><path d="M392.5,6261.1127 L398.75,6261.1127 C408.125,6261.1127 408.125,6168.7375 417.5,6168.7375 L423.75,6168.7375 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="423.75" y="6273.3377"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="430" y="6289.6152">特性</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="225.625" x="485" y="6199.4376"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="213.125" x="491.25" y="6215.715">由很多层结构组成，level 是通过一定的概率随机产生的</text><path d="M453.75,6285.5627 L460,6285.5627 C469.375,6285.5627 469.375,6211.6626 478.75,6211.6626 L485,6211.6626 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="493.125" x="485" y="6236.3876"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="480.625" x="491.25" y="6252.6651">每一层都是一个有序的列表，默认是升序，也可以根据创建映射所提供的 Comparator 进行排序，具体取决于使用的构造方法</text><path d="M453.75,6285.5627 L460,6285.5627 C469.375,6285.5627 469.375,6248.6127 478.75,6248.6127 L485,6248.6127 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="172.5" x="485" y="6273.3377"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="160" x="491.25" y="6289.6152">最底层（Level 1）的链表所包含所有元素</text><path d="M453.75,6285.5627 L460,6285.5627 C469.375,6285.5627 469.375,6285.5627 478.75,6285.5627 L485,6285.5627 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="301.25" x="485" y="6310.2878"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="288.75" x="491.25" y="6326.5652">如果一个元素出现在 Level i 的链表中，则它在 Level i 之下的链表也都会出</text><path d="M453.75,6285.5627 L460,6285.5627 C469.375,6285.5627 469.375,6322.5128 478.75,6322.5128 L485,6322.5128 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="362.5" x="485" y="6347.2379"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="350" x="491.25" y="6363.5153">每个节点都包含两个指针，一个指向同一个链表中的下一个元素，一个指向下面一层的元素</text><path d="M453.75,6285.5627 L460,6285.5627 C469.375,6285.5627 469.375,6359.4629 478.75,6359.4629 L485,6359.4629 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M392.5,6261.1127 L398.75,6261.1127 C408.125,6261.1127 408.125,6285.5627 417.5,6285.5627 L423.75,6285.5627 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="82.5" x="423.75" y="6384.1879"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="70" x="430" y="6400.4654">查找、删除、添加</text><path d="M392.5,6261.1127 L398.75,6261.1127 C408.125,6261.1127 408.125,6396.413 417.5,6396.413 L423.75,6396.413 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M319.375,6242.6376 L325.625,6242.6376 C335,6242.6376 335,6261.1127 344.375,6261.1127 L350.625,6261.1127 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M183.75,5540.5862 L190,5540.5862 C199.375,5540.5862 199.375,6242.6376 208.75,6242.6376 L215,6242.6376 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="100.625" x="215" y="6267.3627"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="88.125" x="221.25" y="6283.6401">ConcurrentSkipListSet</text><path d="M183.75,5540.5862 L190,5540.5862 C199.375,5540.5862 199.375,6279.5877 208.75,6279.5877 L215,6279.5877 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M74.375,4891.7973 L80.625,4891.7973 C90,4891.7973 90,5540.5862 99.375,5540.5862 L105.625,5540.5862 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="48.75" x="105.625" y="6698.2635"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="36.25" x="111.875" y="6714.541">7. Atomic</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="185.625" y="6476.5631"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="191.875" y="6492.8406">基本类型类</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="143.75" x="273.125" y="6421.138"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="131.25" x="279.375" y="6437.4155">用于通过原子的方式更新基本类型</text><path d="M241.875,6488.7881 L248.125,6488.7881 C257.5,6488.7881 257.5,6433.363 266.875,6433.363 L273.125,6433.363 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="71.25" x="273.125" y="6458.0881"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="58.75" x="279.375" y="6474.3655">AtomicBoolean</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="82.5" x="375.625" y="6458.0881"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="70" x="381.875" y="6474.3655">原子更新布尔类型</text><path d="M344.375,6470.3131 L350.625,6470.3131 C360,6470.3131 360,6470.3131 369.375,6470.3131 L375.625,6470.3131 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M241.875,6488.7881 L248.125,6488.7881 C257.5,6488.7881 257.5,6470.3131 266.875,6470.3131 L273.125,6470.3131 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="66.25" x="273.125" y="6495.0381"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="53.75" x="279.375" y="6511.3156">AtomicInteger</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="370.625" y="6495.0381"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="376.875" y="6511.3156">原子更新整形</text><path d="M339.375,6507.2632 L345.625,6507.2632 C355,6507.2632 355,6507.2632 364.375,6507.2632 L370.625,6507.2632 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M241.875,6488.7881 L248.125,6488.7881 C257.5,6488.7881 257.5,6507.2632 266.875,6507.2632 L273.125,6507.2632 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="58.75" x="273.125" y="6531.9882"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="46.25" x="279.375" y="6548.2657">AtomicLong</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="73.75" x="363.125" y="6531.9882"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="61.25" x="369.375" y="6548.2657">原子更新长整型</text><path d="M331.875,6544.2133 L338.125,6544.2133 C347.5,6544.2133 347.5,6544.2133 356.875,6544.2133 L363.125,6544.2133 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M241.875,6488.7881 L248.125,6488.7881 C257.5,6488.7881 257.5,6544.2133 266.875,6544.2133 L273.125,6544.2133 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M154.375,6710.4886 L160.625,6710.4886 C170,6710.4886 170,6488.7881 179.375,6488.7881 L185.625,6488.7881 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="185.625" y="6624.3634"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="191.875" y="6640.6409">数组</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="161.25" x="246.875" y="6568.9383"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="148.75" x="253.125" y="6585.2158">通过原子的方式更新数组里的某个元素</text><path d="M215.625,6636.5884 L221.875,6636.5884 C231.25,6636.5884 231.25,6581.1633 240.625,6581.1633 L246.875,6581.1633 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="87.5" x="246.875" y="6605.8884"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="75" x="253.125" y="6622.1658">AtomicIntegerArray</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="117.5" x="365.625" y="6605.8884"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="105" x="371.875" y="6622.1658">原子更新整型数组里的元素</text><path d="M334.375,6618.1134 L340.625,6618.1134 C350,6618.1134 350,6618.1134 359.375,6618.1134 L365.625,6618.1134 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M215.625,6636.5884 L221.875,6636.5884 C231.25,6636.5884 231.25,6618.1134 240.625,6618.1134 L246.875,6618.1134 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="80" x="246.875" y="6642.8384"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="67.5" x="253.125" y="6659.1159">AtomicLongArray</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="126.25" x="358.125" y="6642.8384"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="113.75" x="364.375" y="6659.1159">原子更新长整型数组里的元素</text><path d="M326.875,6655.0635 L333.125,6655.0635 C342.5,6655.0635 342.5,6655.0635 351.875,6655.0635 L358.125,6655.0635 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M215.625,6636.5884 L221.875,6636.5884 C231.25,6636.5884 231.25,6655.0635 240.625,6655.0635 L246.875,6655.0635 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="101.25" x="246.875" y="6679.7885"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="88.75" x="253.125" y="6696.066">AtomicReferenceArray</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="135" x="379.375" y="6679.7885"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="122.5" x="385.625" y="6696.066">原子更新引用类型数组里的元素</text><path d="M348.125,6692.0135 L354.375,6692.0135 C363.75,6692.0135 363.75,6692.0135 373.125,6692.0135 L379.375,6692.0135 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M215.625,6636.5884 L221.875,6636.5884 C231.25,6636.5884 231.25,6692.0135 240.625,6692.0135 L246.875,6692.0135 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M154.375,6710.4886 L160.625,6710.4886 C170,6710.4886 170,6636.5884 179.375,6636.5884 L185.625,6636.5884 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="185.625" y="6772.1637"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="191.875" y="6788.4412">引用类型</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="292.5" x="264.375" y="6716.7386"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="280" x="270.625" y="6733.0161">如果要原子的更新多个变量，就需要使用这个原子更新引用类型提供的类</text><path d="M233.125,6784.3887 L239.375,6784.3887 C248.75,6784.3887 248.75,6728.9636 258.125,6728.9636 L264.375,6728.9636 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="80" x="264.375" y="6753.6887"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="67.5" x="270.625" y="6769.9661">AtomicReference</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="82.5" x="375.625" y="6753.6887"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="70" x="381.875" y="6769.9661">原子更新引用类型</text><path d="M344.375,6765.9137 L350.625,6765.9137 C360,6765.9137 360,6765.9137 369.375,6765.9137 L375.625,6765.9137 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M233.125,6784.3887 L239.375,6784.3887 C248.75,6784.3887 248.75,6765.9137 258.125,6765.9137 L264.375,6765.9137 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="130.625" x="264.375" y="6790.6387"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="118.125" x="270.625" y="6806.9162">AtomicReferenceFieldUpdater</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="117.5" x="426.25" y="6790.6387"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="105" x="432.5" y="6806.9162">原子更新引用类型里的字段</text><path d="M395,6802.8638 L401.25,6802.8638 C410.625,6802.8638 410.625,6802.8638 420,6802.8638 L426.25,6802.8638 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M233.125,6784.3887 L239.375,6784.3887 C248.75,6784.3887 248.75,6802.8638 258.125,6802.8638 L264.375,6802.8638 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="116.25" x="264.375" y="6827.5888"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="103.75" x="270.625" y="6843.8663">AtomicMarkableReference</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="143.75" x="411.875" y="6827.5888"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="131.25" x="418.125" y="6843.8663">原子更新带有白哦极为的引用类型</text><path d="M380.625,6839.8138 L386.875,6839.8138 C396.25,6839.8138 396.25,6839.8138 405.625,6839.8138 L411.875,6839.8138 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M233.125,6784.3887 L239.375,6784.3887 C248.75,6784.3887 248.75,6839.8138 258.125,6839.8138 L264.375,6839.8138 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M154.375,6710.4886 L160.625,6710.4886 C170,6710.4886 170,6784.3887 179.375,6784.3887 L185.625,6784.3887 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="185.625" y="6919.964"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="191.875" y="6936.2415">字段类</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="283.75" x="255.625" y="6864.5389"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="271.25" x="261.875" y="6880.8163">如果我们只需要某个类里的某个字段，那么就需要使用原子更新字段类</text><path d="M224.375,6932.189 L230.625,6932.189 C240,6932.189 240,6876.7639 249.375,6876.7639 L255.625,6876.7639 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="116.875" x="255.625" y="6901.489"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="104.375" x="261.875" y="6917.7664">AtomicIntegerFieldUpdater</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="126.25" x="403.75" y="6901.489"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="113.75" x="410" y="6917.7664">原子更新整型的字段的更新器</text><path d="M372.5,6913.714 L378.75,6913.714 C388.125,6913.714 388.125,6913.714 397.5,6913.714 L403.75,6913.714 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M224.375,6932.189 L230.625,6932.189 C240,6932.189 240,6913.714 249.375,6913.714 L255.625,6913.714 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="109.375" x="255.625" y="6938.439"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="96.875" x="261.875" y="6954.7165">AtomicLongFieldUpdater</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="126.25" x="396.25" y="6938.439"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="113.75" x="402.5" y="6954.7165">原子更新长整型字段的更新器</text><path d="M365,6950.6641 L371.25,6950.6641 C380.625,6950.6641 380.625,6950.6641 390,6950.6641 L396.25,6950.6641 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M224.375,6932.189 L230.625,6932.189 C240,6932.189 240,6950.6641 249.375,6950.6641 L255.625,6950.6641 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="115" x="255.625" y="6975.3891"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="102.5" x="261.875" y="6991.6666">AtomicStampedReference</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="135" x="401.875" y="6975.3891"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="122.5" x="408.125" y="6991.6666">原子更新带有版本号的引用类型</text><path d="M370.625,6987.6141 L376.875,6987.6141 C386.25,6987.6141 386.25,6987.6141 395.625,6987.6141 L401.875,6987.6141 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M224.375,6932.189 L230.625,6932.189 C240,6932.189 240,6987.6141 249.375,6987.6141 L255.625,6987.6141 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M154.375,6710.4886 L160.625,6710.4886 C170,6710.4886 170,6932.189 179.375,6932.189 L185.625,6932.189 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M74.375,4891.7973 L80.625,4891.7973 C90,4891.7973 90,6710.4886 99.375,6710.4886 L105.625,6710.4886 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="57.5" x="105.625" y="7529.6402"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="45" x="111.875" y="7545.9177">8. 阻塞队列</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="93.75" x="194.375" y="7086.2393"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="81.25" x="200.625" y="7102.5168">ArrayBlockingQueue</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="160" x="319.375" y="7012.3392"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="147.5" x="325.625" y="7028.6166">一个由数组实现的 FIFO 有界阻塞队列</text><path d="M288.125,7098.4644 L294.375,7098.4644 C303.75,7098.4644 303.75,7024.5642 313.125,7024.5642 L319.375,7024.5642 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="315" x="319.375" y="7049.2892"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="302.5" x="325.625" y="7065.5667">ArrayBlockingQueue 有界且固定，在构造函数时确认大小，确认后不支持改变</text><path d="M288.125,7098.4644 L294.375,7098.4644 C303.75,7098.4644 303.75,7061.5143 313.125,7061.5143 L319.375,7061.5143 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="135" x="319.375" y="7086.2393"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="122.5" x="325.625" y="7102.5168">在多线程环境下不保证 “公平性”</text><path d="M288.125,7098.4644 L294.375,7098.4644 C303.75,7098.4644 303.75,7098.4644 313.125,7098.4644 L319.375,7098.4644 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="319.375" y="7141.6644"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="325.625" y="7157.9419">实现</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="70.625" x="380.625" y="7123.1894"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="58.125" x="386.875" y="7139.4669">ReentrantLock</text><path d="M349.375,7153.8895 L355.625,7153.8895 C365,7153.8895 365,7135.4144 374.375,7135.4144 L380.625,7135.4144 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="50" x="380.625" y="7160.1395"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="37.5" x="386.875" y="7176.4169">Condition</text><path d="M349.375,7153.8895 L355.625,7153.8895 C365,7153.8895 365,7172.3645 374.375,7172.3645 L380.625,7172.3645 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M288.125,7098.4644 L294.375,7098.4644 C303.75,7098.4644 303.75,7153.8895 313.125,7153.8895 L319.375,7153.8895 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M163.125,7541.8652 L169.375,7541.8652 C178.75,7541.8652 178.75,7098.4644 188.125,7098.4644 L194.375,7098.4644 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="98.75" x="194.375" y="7326.4148"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="86.25" x="200.625" y="7342.6923">LinkedBlockingQueue</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="142.5" x="324.375" y="7197.0895"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="130" x="330.625" y="7213.367">基于链接、无界的 FIFO 阻塞队列</text><path d="M293.125,7338.6398 L299.375,7338.6398 C308.75,7338.6398 308.75,7209.3146 318.125,7209.3146 L324.375,7209.3146 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="344.375" x="324.375" y="7234.0396"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="331.875" x="330.625" y="7250.3171">默认情况下元素采用自然顺序升序排序，可以通过指定 Comparator 来对元素进行排序</text><path d="M293.125,7338.6398 L299.375,7338.6398 C308.75,7338.6398 308.75,7246.2646 318.125,7246.2646 L324.375,7246.2646 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="324.375" y="7326.4148"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="330.625" y="7342.6923">二叉堆</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="394.375" y="7270.9897"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="400.625" y="7287.2672">分类</text><path d="M363.125,7338.6398 L369.375,7338.6398 C378.75,7338.6398 378.75,7283.2147 388.125,7283.2147 L394.375,7283.2147 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="394.375" y="7307.9398"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="400.625" y="7324.2172">最大堆</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="213.75" x="464.375" y="7307.9398"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="201.25" x="470.625" y="7324.2172">父节点的键值总是大于或等于任何一个子节点的键值</text><path d="M433.125,7320.1648 L439.375,7320.1648 C448.75,7320.1648 448.75,7320.1648 458.125,7320.1648 L464.375,7320.1648 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M363.125,7338.6398 L369.375,7338.6398 C378.75,7338.6398 378.75,7320.1648 388.125,7320.1648 L394.375,7320.1648 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="394.375" y="7344.8898"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="400.625" y="7361.1673">最小堆</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="213.75" x="464.375" y="7344.8898"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="201.25" x="470.625" y="7361.1673">父节点的键值总是小于或等于任何一个子节点的键值</text><path d="M433.125,7357.1149 L439.375,7357.1149 C448.75,7357.1149 448.75,7357.1149 458.125,7357.1149 L464.375,7357.1149 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M363.125,7338.6398 L369.375,7338.6398 C378.75,7338.6398 378.75,7357.1149 388.125,7357.1149 L394.375,7357.1149 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="222.5" x="394.375" y="7381.8399"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="210" x="400.625" y="7398.1174">添加操作则是不断 “上冒”，而删除操作则是不断 “下掉”</text><path d="M363.125,7338.6398 L369.375,7338.6398 C378.75,7338.6398 378.75,7394.0649 388.125,7394.0649 L394.375,7394.0649 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M293.125,7338.6398 L299.375,7338.6398 C308.75,7338.6398 308.75,7338.6398 318.125,7338.6398 L324.375,7338.6398 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="324.375" y="7437.265"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="330.625" y="7453.5425">实现</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="118.125" x="385.625" y="7418.79"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="105.625" x="391.875" y="7435.0674">ReentrantLock + Condition</text><path d="M354.375,7449.4901 L360.625,7449.4901 C370,7449.4901 370,7431.015 379.375,7431.015 L385.625,7431.015 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="385.625" y="7455.7401"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="391.875" y="7472.0175">二叉堆</text><path d="M354.375,7449.4901 L360.625,7449.4901 C370,7449.4901 370,7467.9651 379.375,7467.9651 L385.625,7467.9651 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M293.125,7338.6398 L299.375,7338.6398 C308.75,7338.6398 308.75,7449.4901 318.125,7449.4901 L324.375,7449.4901 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M163.125,7541.8652 L169.375,7541.8652 C178.75,7541.8652 178.75,7338.6398 188.125,7338.6398 L194.375,7338.6398 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="61.875" x="194.375" y="7603.5403"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="49.375" x="200.625" y="7619.8178">DelayQueue</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="143.75" x="287.5" y="7492.6901"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="131.25" x="293.75" y="7508.9676">支持延时获取元素的无界阻塞队列</text><path d="M256.25,7615.7654 L262.5,7615.7654 C271.875,7615.7654 271.875,7504.9152 281.25,7504.9152 L287.5,7504.9152 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="287.5" y="7548.1152"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="293.75" y="7564.3927">应用</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="143.75" x="348.75" y="7529.6402"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="131.25" x="355" y="7545.9177">缓存：清掉缓存中超时的缓存数据</text><path d="M317.5,7560.3403 L323.75,7560.3403 C333.125,7560.3403 333.125,7541.8652 342.5,7541.8652 L348.75,7541.8652 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="348.75" y="7566.5903"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="355" y="7582.8677">任务超时数据</text><path d="M317.5,7560.3403 L323.75,7560.3403 C333.125,7560.3403 333.125,7578.8153 342.5,7578.8153 L348.75,7578.8153 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M256.25,7615.7654 L262.5,7615.7654 C271.875,7615.7654 271.875,7560.3403 281.25,7560.3403 L287.5,7560.3403 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="287.5" y="7622.0154"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="293.75" y="7638.2928">实现</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="118.125" x="348.75" y="7603.5403"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="105.625" x="355" y="7619.8178">ReentrantLock + Condition</text><path d="M317.5,7634.2404 L323.75,7634.2404 C333.125,7634.2404 333.125,7615.7654 342.5,7615.7654 L348.75,7615.7654 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="208.125" x="348.75" y="7640.4904"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="195.625" x="355" y="7656.7679">根据 Delay 时间排序的优先级队列：PriorityQueue</text><path d="M317.5,7634.2404 L323.75,7634.2404 C333.125,7634.2404 333.125,7652.7155 342.5,7652.7155 L348.75,7652.7155 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M256.25,7615.7654 L262.5,7615.7654 C271.875,7615.7654 271.875,7634.2404 281.25,7634.2404 L287.5,7634.2404 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="287.5" y="7695.9155"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="293.75" y="7712.193">Delayed 接口</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="205" x="383.75" y="7677.4405"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="192.5" x="390" y="7693.718">用来标记那些应该在给定延迟时间之后执行的对象</text><path d="M352.5,7708.1406 L358.75,7708.1406 C368.125,7708.1406 368.125,7689.6655 377.5,7689.6655 L383.75,7689.6655 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="435" x="383.75" y="7714.3906"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="422.5" x="390" y="7730.668">该接口要求实现它的实现类必须定义一个 compareTo 方法，该方法提供给此接口的 getDelay 方法一致的排序</text><path d="M352.5,7708.1406 L358.75,7708.1406 C368.125,7708.1406 368.125,7726.6156 377.5,7726.6156 L383.75,7726.6156 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M256.25,7615.7654 L262.5,7615.7654 C271.875,7615.7654 271.875,7708.1406 281.25,7708.1406 L287.5,7708.1406 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M163.125,7541.8652 L169.375,7541.8652 C178.75,7541.8652 178.75,7615.7654 188.125,7615.7654 L194.375,7615.7654 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="91.25" x="194.375" y="7788.2907"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="78.75" x="200.625" y="7804.5682">SynchronousQueue</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="108.75" x="316.875" y="7751.3406"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="96.25" x="323.125" y="7767.6181">一个没有容量的阻塞队列</text><path d="M285.625,7800.5157 L291.875,7800.5157 C301.25,7800.5157 301.25,7763.5657 310.625,7763.5657 L316.875,7763.5657 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="316.875" y="7788.2907"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="323.125" y="7804.5682">应用</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="310" x="378.125" y="7788.2907"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="297.5" x="384.375" y="7804.5682">交换工作，生产者的线程和消费者的线程同步以传递某些信息、事件或者任务</text><path d="M346.875,7800.5157 L353.125,7800.5157 C362.5,7800.5157 362.5,7800.5157 371.875,7800.5157 L378.125,7800.5157 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M285.625,7800.5157 L291.875,7800.5157 C301.25,7800.5157 301.25,7800.5157 310.625,7800.5157 L316.875,7800.5157 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="129.375" x="316.875" y="7825.2408"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="116.875" x="323.125" y="7841.5182">难搞懂，与 Exchanger 有一拼</text><path d="M285.625,7800.5157 L291.875,7800.5157 C301.25,7800.5157 301.25,7837.4658 310.625,7837.4658 L316.875,7837.4658 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M163.125,7541.8652 L169.375,7541.8652 C178.75,7541.8652 178.75,7800.5157 188.125,7800.5157 L194.375,7800.5157 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="99.375" x="194.375" y="7899.1409"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="86.875" x="200.625" y="7915.4184">LinkedTransferQueue</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="108.75" x="325" y="7862.1909"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="96.25" x="331.25" y="7878.4683">链表组成的无界阻塞队列</text><path d="M293.75,7911.366 L300,7911.366 C309.375,7911.366 309.375,7874.4159 318.75,7874.4159 L325,7874.4159 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="450.625" x="325" y="7899.1409"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="438.125" x="331.25" y="7915.4184">相当于， ConcurrentLinkedQueue、SynchronousQueue(公平模式下)、无界的 LinkedBlockingQueues 等的超集</text><path d="M293.75,7911.366 L300,7911.366 C309.375,7911.366 309.375,7911.366 318.75,7911.366 L325,7911.366 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="325" y="7936.091"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="331.25" y="7952.3685">预占模式</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="257.5" x="403.75" y="7936.091"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="245" x="410" y="7952.3685">有就直接拿走，没有就占着这个位置直到拿到或者超时或者中断</text><path d="M372.5,7948.316 L378.75,7948.316 C388.125,7948.316 388.125,7948.316 397.5,7948.316 L403.75,7948.316 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M293.75,7911.366 L300,7911.366 C309.375,7911.366 309.375,7948.316 318.75,7948.316 L325,7948.316 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M163.125,7541.8652 L169.375,7541.8652 C178.75,7541.8652 178.75,7911.366 188.125,7911.366 L194.375,7911.366 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="98.125" x="194.375" y="8009.9911"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="85.625" x="200.625" y="8026.2686">LinkedBlockingDeque</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="117.5" x="323.75" y="7973.0411"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="105" x="330" y="7989.3185">由链表组成的双向阻塞队列</text><path d="M292.5,8022.2162 L298.75,8022.2162 C308.125,8022.2162 308.125,7985.2661 317.5,7985.2661 L323.75,7985.2661 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="418.75" x="323.75" y="8009.9911"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="406.25" x="330" y="8026.2686">容量可选，在初始化时可以设置容量防止其过度膨胀，如果不设置，默认容量大小为 Integer.MAX_VALUE</text><path d="M292.5,8022.2162 L298.75,8022.2162 C308.125,8022.2162 308.125,8022.2162 317.5,8022.2162 L323.75,8022.2162 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="323.75" y="8046.9412"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="330" y="8063.2187">运用</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="73.75" x="385" y="8046.9412"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="61.25" x="391.25" y="8063.2187">“工作窃取” 模式</text><path d="M353.75,8059.1663 L360,8059.1663 C369.375,8059.1663 369.375,8059.1663 378.75,8059.1663 L385,8059.1663 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M292.5,8022.2162 L298.75,8022.2162 C308.125,8022.2162 308.125,8059.1663 317.5,8059.1663 L323.75,8059.1663 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M163.125,7541.8652 L169.375,7541.8652 C178.75,7541.8652 178.75,8022.2162 188.125,8022.2162 L194.375,8022.2162 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M74.375,4891.7973 L80.625,4891.7973 C90,4891.7973 90,7541.8652 99.375,7541.8652 L105.625,7541.8652 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="48.75" x="105.625" y="8915.2679"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="36.25" x="111.875" y="8931.5454">9. 线程池</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="185.625" y="8120.8414"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="191.875" y="8137.1188">好处</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="246.875" y="8083.8913"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="253.125" y="8100.1688">降低资源消耗</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="240" x="343.125" y="8083.8913"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="227.5" x="349.375" y="8100.1688">通过重复利用已创建的线程降低线程创建和销毁造成的消耗</text><path d="M311.875,8096.1163 L318.125,8096.1163 C327.5,8096.1163 327.5,8096.1163 336.875,8096.1163 L343.125,8096.1163 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M215.625,8133.0664 L221.875,8133.0664 C231.25,8133.0664 231.25,8096.1163 240.625,8096.1163 L246.875,8096.1163 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="65" x="246.875" y="8120.8414"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="52.5" x="253.125" y="8137.1188">提高响应速度</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="240" x="343.125" y="8120.8414"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="227.5" x="349.375" y="8137.1188">当任务到达时，任务可以不需要等到线程创建就能立即执行</text><path d="M311.875,8133.0664 L318.125,8133.0664 C327.5,8133.0664 327.5,8133.0664 336.875,8133.0664 L343.125,8133.0664 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M215.625,8133.0664 L221.875,8133.0664 C231.25,8133.0664 231.25,8133.0664 240.625,8133.0664 L246.875,8133.0664 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="91.25" x="246.875" y="8157.7914"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="78.75" x="253.125" y="8174.0689">提高线程的可管理性</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="117.5" x="369.375" y="8157.7914"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="105" x="375.625" y="8174.0689">进行统一分配、调优和监控</text><path d="M338.125,8170.0165 L344.375,8170.0165 C353.75,8170.0165 353.75,8170.0165 363.125,8170.0165 L369.375,8170.0165 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M215.625,8133.0664 L221.875,8133.0664 C231.25,8133.0664 231.25,8170.0165 240.625,8170.0165 L246.875,8170.0165 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M154.375,8927.493 L160.625,8927.493 C170,8927.493 170,8133.0664 179.375,8133.0664 L185.625,8133.0664 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="46.875" x="185.625" y="8859.8428"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="34.375" x="191.875" y="8876.1203">Executor</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="51.25" x="263.75" y="8194.7415"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="38.75" x="270" y="8211.019">Executors</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="504.375" x="346.25" y="8194.7415"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="491.875" x="352.5" y="8211.019">静态工厂类，提供了 Executor、ExecutorService、ScheduledExecutorService、ThreadFactory、Callable 等类的静态工厂方法</text><path d="M315,8206.9666 L321.25,8206.9666 C330.625,8206.9666 330.625,8206.9666 340,8206.9666 L346.25,8206.9666 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M232.5,8872.0679 L238.75,8872.0679 C248.125,8872.0679 248.125,8206.9666 257.5,8206.9666 L263.75,8206.9666 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="93.125" x="263.75" y="8822.8928"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="80.625" x="270" y="8839.1702">ThreadPoolExecutor</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="388.125" y="8508.8171"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="394.375" y="8525.0946">参数含义</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="63.75" x="466.875" y="8231.6916"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="51.25" x="473.125" y="8247.9691">corePoolSize</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="108.75" x="561.875" y="8231.6916"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="96.25" x="568.125" y="8247.9691">线程池中核心线程的数量</text><path d="M530.625,8243.9166 L536.875,8243.9166 C546.25,8243.9166 546.25,8243.9166 555.625,8243.9166 L561.875,8243.9166 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M435.625,8521.0422 L441.875,8521.0422 C451.25,8521.0422 451.25,8243.9166 460.625,8243.9166 L466.875,8243.9166 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="82.5" x="466.875" y="8268.6417"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="70" x="473.125" y="8284.9191">maximumPoolSize</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="117.5" x="580.625" y="8268.6417"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="105" x="586.875" y="8284.9191">线程池中允许的最大线程数</text><path d="M549.375,8280.8667 L555.625,8280.8667 C565,8280.8667 565,8280.8667 574.375,8280.8667 L580.625,8280.8667 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M435.625,8521.0422 L441.875,8521.0422 C451.25,8521.0422 451.25,8280.8667 460.625,8280.8667 L466.875,8280.8667 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="70" x="466.875" y="8305.5917"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="57.5" x="473.125" y="8321.8692">keepAliveTime</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="73.75" x="568.125" y="8305.5917"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="61.25" x="574.375" y="8321.8692">线程空闲的时间</text><path d="M536.875,8317.8168 L543.125,8317.8168 C552.5,8317.8168 552.5,8317.8168 561.875,8317.8168 L568.125,8317.8168 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M435.625,8521.0422 L441.875,8521.0422 C451.25,8521.0422 451.25,8317.8168 460.625,8317.8168 L466.875,8317.8168 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="26.875" x="466.875" y="8342.5418"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="14.375" x="473.125" y="8358.8193">unit</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="98.75" x="525" y="8342.5418"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="86.25" x="531.25" y="8358.8193">keepAliveTime 的单位</text><path d="M493.75,8354.7668 L500,8354.7668 C509.375,8354.7668 509.375,8354.7668 518.75,8354.7668 L525,8354.7668 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M435.625,8521.0422 L441.875,8521.0422 C451.25,8521.0422 451.25,8354.7668 460.625,8354.7668 L466.875,8354.7668 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="57.5" x="466.875" y="8453.392"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="45" x="473.125" y="8469.6695">workQueue</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="152.5" x="555.625" y="8379.4919"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="140" x="561.875" y="8395.7693">用来保存等待执行的任务的阻塞队列</text><path d="M524.375,8465.6171 L530.625,8465.6171 C540,8465.6171 540,8391.7169 549.375,8391.7169 L555.625,8391.7169 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="73.75" x="555.625" y="8471.8671"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="61.25" x="561.875" y="8488.1445">使用的阻塞队列</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="93.75" x="660.625" y="8416.442"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="81.25" x="666.875" y="8432.7194">ArrayBlockingQueue</text><path d="M629.375,8484.0921 L635.625,8484.0921 C645,8484.0921 645,8428.667 654.375,8428.667 L660.625,8428.667 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="98.75" x="660.625" y="8453.392"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="86.25" x="666.875" y="8469.6695">LinkedBlockingQueue</text><path d="M629.375,8484.0921 L635.625,8484.0921 C645,8484.0921 645,8465.6171 654.375,8465.6171 L660.625,8465.6171 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="91.25" x="660.625" y="8490.3421"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="78.75" x="666.875" y="8506.6196">SynchronousQueue</text><path d="M629.375,8484.0921 L635.625,8484.0921 C645,8484.0921 645,8502.5671 654.375,8502.5671 L660.625,8502.5671 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="100" x="660.625" y="8527.2922"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="666.875" y="8543.5696">PriorityBlockingQueue</text><path d="M629.375,8484.0921 L635.625,8484.0921 C645,8484.0921 645,8539.5172 654.375,8539.5172 L660.625,8539.5172 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M524.375,8465.6171 L530.625,8465.6171 C540,8465.6171 540,8484.0921 549.375,8484.0921 L555.625,8484.0921 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M435.625,8521.0422 L441.875,8521.0422 C451.25,8521.0422 451.25,8465.6171 460.625,8465.6171 L466.875,8465.6171 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="68.125" x="466.875" y="8582.7173"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="55.625" x="473.125" y="8598.9948">threadFactory</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="108.75" x="566.25" y="8564.2422"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="96.25" x="572.5" y="8580.5197">用于设置创建线程的工厂</text><path d="M535,8594.9423 L541.25,8594.9423 C550.625,8594.9423 550.625,8576.4673 560,8576.4673 L566.25,8576.4673 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="99.375" x="566.25" y="8601.1923"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="86.875" x="572.5" y="8617.4698">DefaultThreadFactory</text><path d="M535,8594.9423 L541.25,8594.9423 C550.625,8594.9423 550.625,8613.4174 560,8613.4174 L566.25,8613.4174 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M435.625,8521.0422 L441.875,8521.0422 C451.25,8521.0422 451.25,8594.9423 460.625,8594.9423 L466.875,8594.9423 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="42.5" x="466.875" y="8712.0425"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="30" x="473.125" y="8728.32">handler</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="195" x="540.625" y="8638.1424"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="182.5" x="546.875" y="8654.4199">RejectedExecutionHandler，线程池的拒绝策略</text><path d="M509.375,8724.2676 L515.625,8724.2676 C525,8724.2676 525,8650.3674 534.375,8650.3674 L540.625,8650.3674 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="540.625" y="8730.5176"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="546.875" y="8746.795">分类</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="161.875" x="601.875" y="8675.0925"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="149.375" x="608.125" y="8691.3699">AbortPolicy：直接抛出异常，默认策略</text><path d="M570.625,8742.7426 L576.875,8742.7426 C586.25,8742.7426 586.25,8687.3175 595.625,8687.3175 L601.875,8687.3175 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="206.875" x="601.875" y="8712.0425"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="194.375" x="608.125" y="8728.32">CallerRunsPolicy: 用调用者所在的线程来执行任务</text><path d="M570.625,8742.7426 L576.875,8742.7426 C586.25,8742.7426 586.25,8724.2676 595.625,8724.2676 L601.875,8724.2676 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="280" x="601.875" y="8748.9926"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="267.5" x="608.125" y="8765.2701">DiscardOldestPolicy: 丢弃阻塞队列中靠最前的任务，并执行当前任务</text><path d="M570.625,8742.7426 L576.875,8742.7426 C586.25,8742.7426 586.25,8761.2177 595.625,8761.2177 L601.875,8761.2177 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="123.125" x="601.875" y="8785.9427"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="110.625" x="608.125" y="8802.2202">DiscardPolicy: 直接丢弃任务</text><path d="M570.625,8742.7426 L576.875,8742.7426 C586.25,8742.7426 586.25,8798.1677 595.625,8798.1677 L601.875,8798.1677 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M509.375,8724.2676 L515.625,8724.2676 C525,8724.2676 525,8742.7426 534.375,8742.7426 L540.625,8742.7426 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M435.625,8521.0422 L441.875,8521.0422 C451.25,8521.0422 451.25,8724.2676 460.625,8724.2676 L466.875,8724.2676 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M356.875,8835.1178 L363.125,8835.1178 C372.5,8835.1178 372.5,8521.0422 381.875,8521.0422 L388.125,8521.0422 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="388.125" y="9026.1182"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="394.375" y="9042.3956">线程池分类</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="95.625" x="475.625" y="8878.3179"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="83.125" x="481.875" y="8894.5953">newFixedThreadPool</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="117.5" x="602.5" y="8822.8928"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="105" x="608.75" y="8839.1702">可重用固定线程数的线程池</text><path d="M571.25,8890.5429 L577.5,8890.5429 C586.875,8890.5429 586.875,8835.1178 596.25,8835.1178 L602.5,8835.1178 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="602.5" y="8896.7929"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="608.75" y="8913.0704">分析</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="167.5" x="663.75" y="8859.8428"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="155" x="670" y="8876.1203">corePoolSize 和 maximumPoolSize 一致</text><path d="M632.5,8909.0179 L638.75,8909.0179 C648.125,8909.0179 648.125,8872.0679 657.5,8872.0679 L663.75,8872.0679 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="171.25" x="663.75" y="8896.7929"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="158.75" x="670" y="8913.0704">使用 “无界” 队列，LinkedBlockingQueue</text><path d="M632.5,8909.0179 L638.75,8909.0179 C648.125,8909.0179 648.125,8909.0179 657.5,8909.0179 L663.75,8909.0179 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="281.25" x="663.75" y="8933.743"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="268.75" x="670" y="8950.0204">maximumPoolSize、keepAliveTime、RejectedExecutionHandler 无效</text><path d="M632.5,8909.0179 L638.75,8909.0179 C648.125,8909.0179 648.125,8945.968 657.5,8945.968 L663.75,8945.968 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M571.25,8890.5429 L577.5,8890.5429 C586.875,8890.5429 586.875,8909.0179 596.25,8909.0179 L602.5,8909.0179 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M444.375,9038.3432 L450.625,9038.3432 C460,9038.3432 460,8890.5429 469.375,8890.5429 L475.625,8890.5429 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="105" x="475.625" y="9007.6431"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="92.5" x="481.875" y="9023.9206">newCachedThreadPool</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="141.875" x="611.875" y="8970.6931"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="129.375" x="618.125" y="8986.9705">使用单个 worker 线程的 Executor</text><path d="M580.625,9019.8682 L586.875,9019.8682 C596.25,9019.8682 596.25,8982.9181 605.625,8982.9181 L611.875,8982.9181 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="611.875" y="9026.1182"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="618.125" y="9042.3956">分析</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="192.5" x="673.125" y="9007.6431"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="180" x="679.375" y="9023.9206">corePoolSize 和 maximumPoolSize 被设置为 1</text><path d="M641.875,9038.3432 L648.125,9038.3432 C657.5,9038.3432 657.5,9019.8682 666.875,9019.8682 L673.125,9019.8682 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="194.375" x="673.125" y="9044.5932"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="181.875" x="679.375" y="9060.8707">使用 LinkedBlockingQueue 作为 workerQueue</text><path d="M641.875,9038.3432 L648.125,9038.3432 C657.5,9038.3432 657.5,9056.8182 666.875,9056.8182 L673.125,9056.8182 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M580.625,9019.8682 L586.875,9019.8682 C596.25,9019.8682 596.25,9038.3432 605.625,9038.3432 L611.875,9038.3432 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M444.375,9038.3432 L450.625,9038.3432 C460,9038.3432 460,9019.8682 469.375,9019.8682 L475.625,9019.8682 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="115.625" x="475.625" y="9155.4434"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="103.125" x="481.875" y="9171.7209">newSingleThreadExecutor</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="135" x="622.5" y="9081.5433"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="122.5" x="628.75" y="9097.8207">会根据需要创建新线程的线程池</text><path d="M591.25,9167.6685 L597.5,9167.6685 C606.875,9167.6685 606.875,9093.7683 616.25,9093.7683 L622.5,9093.7683 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="30" x="622.5" y="9173.9185"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="17.5" x="628.75" y="9190.1959">分析</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="108.75" x="683.75" y="9118.4933"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="96.25" x="690" y="9134.7708">corePoolSize 被设置为 0</text><path d="M652.5,9186.1435 L658.75,9186.1435 C668.125,9186.1435 668.125,9130.7184 677.5,9130.7184 L683.75,9130.7184 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="202.5" x="683.75" y="9155.4434"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="190" x="690" y="9171.7209">maximumPoolSize 被设置为 Integer.MAX_VALUE</text><path d="M652.5,9186.1435 L658.75,9186.1435 C668.125,9186.1435 668.125,9167.6685 677.5,9167.6685 L683.75,9167.6685 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="169.375" x="683.75" y="9192.3935"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="156.875" x="690" y="9208.671">SynchronousQueue 作为 WorkerQueue</text><path d="M652.5,9186.1435 L658.75,9186.1435 C668.125,9186.1435 668.125,9204.6185 677.5,9204.6185 L683.75,9204.6185 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="566.875" x="683.75" y="9229.3436"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="554.375" x="690" y="9245.621">如果主线程提交任务的速度高于 maxiMumPool 中线程处理任务的速度时，CachedThreadPool 会不断创建心线程，可能会耗尽 CPU 和内存资源</text><path d="M652.5,9186.1435 L658.75,9186.1435 C668.125,9186.1435 668.125,9241.5686 677.5,9241.5686 L683.75,9241.5686 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M591.25,9167.6685 L597.5,9167.6685 C606.875,9167.6685 606.875,9186.1435 616.25,9186.1435 L622.5,9186.1435 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M444.375,9038.3432 L450.625,9038.3432 C460,9038.3432 460,9167.6685 469.375,9167.6685 L475.625,9167.6685 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M356.875,8835.1178 L363.125,8835.1178 C372.5,8835.1178 372.5,9038.3432 381.875,9038.3432 L388.125,9038.3432 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="388.125" y="9284.7687"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="394.375" y="9301.0461">任务提交</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="86.25" x="466.875" y="9266.2936"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="73.75" x="473.125" y="9282.5711">Executor.execute()</text><path d="M435.625,9296.9937 L441.875,9296.9937 C451.25,9296.9937 451.25,9278.5187 460.625,9278.5187 L466.875,9278.5187 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="110.625" x="466.875" y="9303.2437"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="98.125" x="473.125" y="9319.5212">ExecutorService.submit()</text><path d="M435.625,9296.9937 L441.875,9296.9937 C451.25,9296.9937 451.25,9315.4688 460.625,9315.4688 L466.875,9315.4688 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M356.875,8835.1178 L363.125,8835.1178 C372.5,8835.1178 372.5,9296.9937 381.875,9296.9937 L388.125,9296.9937 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="388.125" y="9340.1938"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="394.375" y="9356.4713">任务执行</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="466.875" y="9340.1938"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="473.125" y="9356.4713">执行流程</text><path d="M435.625,9352.4188 L441.875,9352.4188 C451.25,9352.4188 451.25,9352.4188 460.625,9352.4188 L466.875,9352.4188 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M356.875,8835.1178 L363.125,8835.1178 C372.5,8835.1178 372.5,9352.4188 381.875,9352.4188 L388.125,9352.4188 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="388.125" y="9377.1439"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="394.375" y="9393.4213">线程池调优</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="475.625" y="9377.1439"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="481.875" y="9393.4213">两种模型</text><path d="M444.375,9389.3689 L450.625,9389.3689 C460,9389.3689 460,9389.3689 469.375,9389.3689 L475.625,9389.3689 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M356.875,8835.1178 L363.125,8835.1178 C372.5,8835.1178 372.5,9389.3689 381.875,9389.3689 L388.125,9389.3689 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="56.25" x="388.125" y="9414.0939"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="43.75" x="394.375" y="9430.3714">线程池监控</text><path d="M356.875,8835.1178 L363.125,8835.1178 C372.5,8835.1178 372.5,9426.319 381.875,9426.319 L388.125,9426.319 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M232.5,8872.0679 L238.75,8872.0679 C248.125,8872.0679 248.125,8835.1178 257.5,8835.1178 L263.75,8835.1178 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="135" x="263.75" y="9487.9941"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="122.5" x="270" y="9504.2715">ScheduledThreadPoolExecutor</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="121.875" x="430" y="9451.044"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="109.375" x="436.25" y="9467.3215">继承自 ThreadPoolExecutor</text><path d="M398.75,9500.2191 L405,9500.2191 C414.375,9500.2191 414.375,9463.269 423.75,9463.269 L430,9463.269 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="170" x="430" y="9487.9941"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="157.5" x="436.25" y="9504.2715">给定延迟后执行任务，或者定期执行任务</text><path d="M398.75,9500.2191 L405,9500.2191 C414.375,9500.2191 414.375,9500.2191 423.75,9500.2191 L430,9500.2191 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="696.25" x="430" y="9524.9442"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="683.75" x="436.25" y="9541.2216">内部使用 DelayQueue 来实现，会把调度的任务放入 DelayQueue 中，DelayQueue 内部封装 PriorityQueue，这个 priorityQueue 会堆队列中的 ScheduledFutureTask 进行排序</text><path d="M398.75,9500.2191 L405,9500.2191 C414.375,9500.2191 414.375,9537.1692 423.75,9537.1692 L430,9537.1692 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M232.5,8872.0679 L238.75,8872.0679 C248.125,8872.0679 248.125,9500.2191 257.5,9500.2191 L263.75,9500.2191 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M154.375,8927.493 L160.625,8927.493 C170,8927.493 170,8872.0679 179.375,8872.0679 L185.625,8872.0679 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="185.625" y="9654.2694"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="191.875" y="9670.5469">Future</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="255.625" y="9561.8942"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="261.875" y="9578.1717">异步计算</text><path d="M224.375,9666.4944 L230.625,9666.4944 C240,9666.4944 240,9574.1193 249.375,9574.1193 L255.625,9574.1193 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="38.75" x="255.625" y="9635.7944"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="26.25" x="261.875" y="9652.0718">Future</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="47.5" x="325.625" y="9635.7944"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="35" x="331.875" y="9652.0718">提供操作</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="73.75" x="404.375" y="9598.8443"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="61.25" x="410.625" y="9615.1218">执行任务的取消</text><path d="M373.125,9648.0194 L379.375,9648.0194 C388.75,9648.0194 388.75,9611.0693 398.125,9611.0693 L404.375,9611.0693 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="82.5" x="404.375" y="9635.7944"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="70" x="410.625" y="9652.0718">查询任务是否完成</text><path d="M373.125,9648.0194 L379.375,9648.0194 C388.75,9648.0194 388.75,9648.0194 398.125,9648.0194 L404.375,9648.0194 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="91.25" x="404.375" y="9672.7444"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="78.75" x="410.625" y="9689.0219">获取任务的执行结果</text><path d="M373.125,9648.0194 L379.375,9648.0194 C388.75,9648.0194 388.75,9684.9695 398.125,9684.9695 L404.375,9684.9695 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M294.375,9648.0194 L300.625,9648.0194 C310,9648.0194 310,9648.0194 319.375,9648.0194 L325.625,9648.0194 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M224.375,9666.4944 L230.625,9666.4944 C240,9666.4944 240,9648.0194 249.375,9648.0194 L255.625,9648.0194 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="58.125" x="255.625" y="9728.1696"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="45.625" x="261.875" y="9744.447">FutureTask</text><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="401.875" x="345" y="9709.6945"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="389.375" x="351.25" y="9725.972">实现 RunableFuture 接口，既可以作为 Runable 被执行，也可以作为 Future 得到 Callable 的放回置</text><path d="M313.75,9740.3946 L320,9740.3946 C329.375,9740.3946 329.375,9721.9196 338.75,9721.9196 L345,9721.9196 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><rect fill="#FEFECE" filter="url(#f16g1p9ivlka0v)" height="24.4501" rx="7.8125" ry="7.8125" style="stroke: #A80036; stroke-width: 0.9375;" width="88.125" x="345" y="9746.6446"/><text fill="#000000" font-family="sans-serif" font-size="8.75" lengthAdjust="spacingAndGlyphs" textLength="75.625" x="351.25" y="9762.9221">内部基于 AQS 实现</text><path d="M313.75,9740.3946 L320,9740.3946 C329.375,9740.3946 329.375,9758.8696 338.75,9758.8696 L345,9758.8696 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M224.375,9666.4944 L230.625,9666.4944 C240,9666.4944 240,9740.3946 249.375,9740.3946 L255.625,9740.3946 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M154.375,8927.493 L160.625,8927.493 C170,8927.493 170,9666.4944 179.375,9666.4944 L185.625,9666.4944 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><path d="M74.375,4891.7973 L80.625,4891.7973 C90,4891.7973 90,8927.493 99.375,8927.493 L105.625,8927.493 " fill="none" style="stroke: #A80036; stroke-width: 0.625;"/><!--MD5=[84b2f8162b5eba42045ab9a2219e81ea]
@startmindmap
* Java 并发体系

** 1. Java 内存模型（JMM）



*** 线程通信机制
**** 内存共享
***** Java 采用
**** 消息传递

*** 内存模型
**** 重排序
***** 为了程序的性能，处理器、编译器都会对程序进行重排序处理
***** 条件
****** 在单线程环境不能改变程序运行的结果
****** 存在数据依赖关系的不允许重排序
***** 问题
****** 重排序在多线程环境下可能会导致数据不安全

**** 顺序一致性
***** 多线程环境下的理论参考模型
***** 为程序提供了极强的内存可见性保证
***** 特性
****** 一个线程中的所有操作必须按照程序的顺序来致性
****** 所有的线程都只能看到一个单一的操作执行顺序，不管程序是否同步
****** 每个操作都必须原子执行并且对所有线程可见


**** happens-before
***** JVM 中最核心的理论，保证内存可见性
***** JVM 中，如果一个操作的执行结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 存在数据依赖关系的不允许重排序
***** 理论
****** 如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作顺序排在第二个操作之前
****** 两个操作之前存在 happens-befoe 关系，并不意味着一定要按照 happens-before 原则指定的顺序来执行，如果，重排序之后的运行结果和 happens-before 运行结果相同，那么这种重排序不非法

**** as-if-serial
***** 所有的操作都可以为了优化而被重排序，但是你必须要保证重排序之后执行的结果不能被改变

*** synchronized
**** 同步、重量级锁
**** 原理
***** synchronized 可以保证方法或者代码块在运行市，同一时刻只有一个方法可以进入临界区，同时，它还可以保证共享变量的内存可见性
**** 锁对象
***** 普通同步方法，锁是当前实例对象
***** 静态同步方法，锁是当前类的 class 对象
***** 同步方法块，锁是括号里的对象
**** 实现机制
***** Java 对象头
****** synchronized 的锁就是保存在Java 对象头中的
****** 包括两部分数据
******* Mark Word(标记字段)
******** Mark Word 被设计成一个非固定的数据结果以便在极小的空间内存储尽量多的数据，它会根据对象的状态复用自己的存储空间
******** 包括
********* 哈希码（HashCode）、GC 分代年龄、锁状态标记、线程持有锁、偏向锁线程Id、偏向时间戳
******* Klass Pointer (类型指针)

***** monitor
****** owner
******* 初始时为 Null 表示当前没有任何线程拥有该 monitor record，当线程成功拥有该锁后保存线程唯一表示，当锁释放时又设置为 Null


**** 锁优化
***** 自旋锁
****** 该线程的等待一段时间，不会被立刻挂起，看持有锁的线程是否会很快释放锁（循环方式）
****** 自旋次数较难控制（-XX:preBlockSpin）
****** 存在理论：线程的频繁挂起、唤醒负担较重， 可以认为每个线程占用锁的时间很短，线程挂起再唤醒得不偿失
****** 缺点
******* 自选次数无法确定
***** 适应性自旋锁
****** 自旋次数不再是确定的，它是由前一次在同一个锁上的自选时间及锁的拥有者的状态来决定
****** 自选成功，则可以增加自旋次数，如果获取锁经常失败，那么自旋次数会减少
***** 锁消除
****** 若不存在数据竞争的情况，JVM会消除锁机制
****** 判断依据
******* 变量逃逸
***** 锁粗化
****** 将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。例如 for 循环内部获取锁
***** 轻量级锁
****** 在没有多线程的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗
****** 通过 CAS 来获取锁和释放锁
****** 性能依据
******* 对于绝大部分的锁，在整个生命周期内都是不会存在竞争的
****** 缺点
******* 在多线程情况下，其运行效率比重量级锁还会慢
***** 偏向锁线程
****** 为了在无多线程竞争的情况下尽量较少不必要的轻量级锁的执行路径
****** 主要尽可能避免不必需要的 CAS 操作，如果竞争锁失败，则升级为轻量级锁


*** volatile
**** 特性
***** volatile 可见性：对于 volatile 的读，总可以看到对这个变量最终的写
***** volatile 原子性：volatile 对单个读/写具有原子性（32位Long、Double），但是符合操作除外，例如 i++
**** 实现机制
***** 内存屏障
**** 内存语义
***** 当写一个 volatile 变量时，JMM 会把该线程对应的本地内存中的共享变量值立即刷新到主内存中
***** 当读一个 volatile 变量时，JMM 会把该线程对应的本地内存设置为无效，直接从主内存中读取共享变量
**** 操作系统语义
***** 主存、高速缓存（线程私有）缓存一致
***** 解决方案
****** 通过在总线加 Lock 锁的方式
****** 通过缓存一致性协议（MESI）
**** 内存模型
***** 重排序
***** happens-before




*** dcl()
**** 单例模式
**** DCL
***** 重排序
***** happens-before
**** 解决方案
***** volatile 方案
****** 禁止重排序
***** 基于类初始化的解决方案
****** 利用 ClassLoader 的机制来保证初始化 instance 时就只有一个线程，JVM 在类的初始化阶段会获得一个锁，这个锁可以同步多个线程对同一个类的初始话


** 2. Java 内存模型（JMM）
*** AQS
**** AbstractQueuedSynchronizer，同步器，实现 JUC 核心基础组件
**** 解决了子类实现同步器时涉及的大量细节问题，例如获取同步状态、FIFO同步队列
**** 采用模板模式，AQS 实现了大量通用方法，子类通过继承方式实现其抽象方法来管理同步状态
**** CLH 同步队列
***** FIFO 双向队列，AQS 依赖它来解决同步状态的管理问题
***** 首节点唤醒，等待队列加入到 CLH 同步队列的尾部
**** 同步状态获取与释放
***** 独占式
****** 获取锁
******* 获取同步状态：acquire
******* 响应中断：acquireInterruptibly
******* 超时获取：tryAcquireNanos
****** 释放锁
******* release
***** 共享式
****** 获取锁
******* acquireShared
****** 释放锁
******* releaseShared
**** 线程阻塞与唤醒
***** 当有线程获取锁了，其他再次获取时需要阻塞，当线程释放锁后，AQS负责唤醒线程
***** LockSupport
****** 是用来创建锁和其他同步类的基本线程阻塞原语
****** 每个使用 LockSupport 的线程都会与一个许可关联，如果该许可可用，并且可在进程中使用，则调用 park() 将会立即放回，否则可能阻塞，如果许可尚不可用，则可以调用 unpark 使其可用
****** park()、unPark()
*** CAS
**** Compare And Swap，整个 JUC 体系最核心、最基础理论
**** 内存值 V 、旧的预期值A、要更新的值 B 、当且仅当内存值 V 的值等于旧的预期值 A 时才会将内存之 V 的值修改为 B，否则什么都不干
**** native 中存在四个参数
**** 缺陷
***** 循环时间长
***** 只能保证一个共享变量原子操作
***** ABA 问题
****** 解决方案
******* 版本号
******* AtomicStampedReference



** 3. 锁
*** ReentrantLock
**** 可重入锁，是一种递归无阻塞的同步机制
**** 比 synchronized 更强大、灵活的锁机制，可以减少死锁发生的概率
**** 分为公平锁、非公平锁
**** 底层采用 CAS 实现，通过内部的 Sync 继承 AQS
*** ReentrantReadWriteLock
**** 读写锁，两把锁
***** 共享锁：读锁
***** 排他锁：写锁
**** 锁降级：遵循获取写锁、获取读锁在释放写锁的次序，写锁能够降级成为读锁
*** Condition
**** Lock 提供条件 Condition，对线程的等待、唤醒操作更加详细和灵活
**** 内部维护一个 Condition 队列，当前线程调用 await() 方法，将会以当前线程构成一个节点（Node），并将接待你加入到该队列的尾部

** 4. 并发工具类
*** CyclicBarrier
**** 它允许一组线程互相等待，直到到达某个公共屏障点（common barrier point）
**** 通俗讲：让一组线程达到一个屏障时被阻塞，知道最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会干活
**** 底层采用 ReentrantLock + Condition 实现
**** 应用场景
***** 多线程合并的操作结果，用于多线程计算数据，最后合并计算结果的应用场景
*** CountDownLatch
**** 在完成一组正在其他线程中执行的操作值钱，它允许调用一个或多个线程一直等待
**** 用给定的计数器 初始化 CountDownLatch，由于调用 countDown() 放啊发，所以在技术其到达零之前，await() 方法会一直受阻塞。\n 之后，会释放所有等待的线程，await 的所有后续调用都将立即返回。这种现象只出现一次 - - 计数器无法被重置。如果需要被重新技术，请考虑 CyclicBarrier
**** 与 CyclicBarrier 的区别
***** CountDownLatch 的作用是允许 1 或者 N 个线程等待其他线程完成执行；而 CyclicBarrier 则是允许 N 个线程相互等待
***** CountDownLatch 的计数器无法被重置；CyclicBarrier 的计数器可以被重置后使用，因此它被称为是循环的 barrier
**** 内部采用共享锁来实现
*** Semaphore
**** 信号量
***** 一个控制访问多个共享资源的计数器
**** 从概念上来讲，信号量维护了一个许可集。如果有必要，在许可可用前会阻塞每一个 acquire()，然后再获得许可。每一个 release() 添加一个许可，从而可能释放一个正在阻塞的获取者。\n但是，不使用实际的许可对象，Samphore 只对可用许可的号码进行技术，并采取相应的行动
**** 信号量 Samphore 是一个非负整数（ >=1 ）。当一个线程想要访问某个共享资源是，它必须先获取 Semaphore ，当 Semaphore > 0 时，\n 获取该资源并使 Semaphore -1。如果 Semaphore = 0，则表示全部的共享资源已经被其他线程全部占用，线程必须等待其他线程释放资源。当线程释放资源时，Semaphore +1
**** 应用场景
***** 通常用于限制可以访问某些资源（物理或逻辑的）线程数目
**** 内部采用共享锁实现
*** Exchanger
**** 可以在对中对元素进行配对和交换的线程的同步点
**** 允许在并发任务直中交换数据，具体来说，Exchanger 类允许在两个线程之间定义同步点。\n当两个线程都到到同步点时，他们交换数据结构，因此第一个线程的数据结构进入到第二个线程的数据结构中，第二个线程的数据结构进入到第一个线程中



** 5. 其他
*** ThreadLocal
**** 一种解决多线程环境下成员变量的问题的方案，但是与线程同步无关。\n其思路是为每一个线程创建一个单独的变量副本，从而每个线程都可以独立的改变自己所拥有的变量副本，而不会改变其他线程所对应的副本
**** ThreadLocal 不是用于解决共享变量的问题id额，也不是为了协调线程同步而存在，而是为了方便每个线程处理自己的状态而引入的一个机制
**** 四个方法
***** get(): 返回此线程局部变量的当前副本中的值
***** initiaValue(): 返回此线程局部变量的当前线程的“初始值”
***** remove() ： 移除此线程局部变量当前线程的值
***** set(T value) ：将此线程局部变量的当前线程副本中的值设置为指定值
**** ThreadLocalMap
***** 实现线程隔离机制的关键
***** 每个 Thread 内部都有一个 Threadlocal.ThreadLocalMap 类型中的成员，该成员用来存储实际的 ThreadLocal 变量副本
***** 提供了一种用键值对方式存储每一个线程的变量副本的方法，key 为当前 ThreadLocal 对象，value 则是对应线程的变量副本
**** 注意点
***** ThreadLocal 实例本身是不存储值，它只是提供了一个在当前线程中找到副本值的 key
***** 是 ThreadLocal 包含在 Thread 中，而不是 Thread 包含在 ThreadLocal 中
**** 内存泄漏问题
***** ThreadlocalMap
****** key 弱引用，value 强引用，无法回收
***** 显示调用 remove()
*** Fork/Join
**** 一个用于并行执行任务的框架，是一个把大任务分割成若干个小人物，最终汇总每个小任务结果后得到大人物结果的框架
**** 核心思想
***** “分治”
***** fork 分级任务，join 收集数据
**** 工作窃取
***** 某个线程从其他队列里窃取任务来执行
***** 执行快的线程帮助执行慢的线程执行任务，提升整体任务效率
***** 队列要采用双向队列
**** 核心类
***** ForkJoinPool
****** 执行任务的线程池
***** ForkJoinTask
****** 表示任务，用于 ForkJoinPool 的任务抽象
***** ForkJoinWorkerThread
****** 执行任务的工作线程



** 6. Java 并发集合
*** ConcurrentHashMap
**** CAS + Synchronized 来保证并发更新的安全，底层采用 数组 + 链表/红黑树 的存储结构
**** 重要内部类
***** Node
****** key-value键值对
***** TreeNode
****** 红黑树节点
***** TreeBin
****** 就相当于一个红黑树，其构造方法其实就是构造红黑树的过程
***** ForwardingNode
****** 辅助节点，用于 ConcurrentHashMap 扩容操作
****** sizeCtl
******* 控制标识符，用来控制 table 初始化和扩容操作的
******* 含义
******** 负数代表正在进行初始化或扩容操作
******** -1 代表初始化
******** -N 表示有 N-1 个线程正在进行扩容操作
******** 正数或零代表 hash 表还没有被初始化，这个数值表示初始化或进行下一次扩容的大小
**** 重要操作
***** initTable
****** ConcurrentHashMap 初始化方法
****** 只能由一个线程参与初始化过程，其他线程必须挂起
****** 构造函数不做初始化过程，初始化真正的是 put 操作中出发
****** 步骤
******* sizeCtl < 0 表示正在进行初始化，线程挂起
******* 线程获取初始化资格（CAS(sizeCtl, sc, -1)）进行初始化过程
******* 初始化步骤完成以后，设置 sizeCtl = 0.75*n (下一次扩容的阈值)，表示下一次扩容的大小
***** put
****** 核心思想
******* 根据 hash 值计算节点插入在 table 的位置，如果该位置为空，则直接插入，否则插入到链表或者树中
******* 真是情况较为复杂
****** 步骤
******* table 为 null, 线程进入初始化步骤，如果有其他线程正在进行初始化，该线程挂起
******* 如果插入的当前 i 位置为 null，说明该位置是第一次插入，利用 CAS 插入节点即可，插入成功，则调用 addCount 判断是否需要扩容。若插入失败，则继续匹配（自旋）
******* 若该节点的 hash == MOVED(-1) ，表示有线程正在进行扩容，则进入扩容进程中
******* 其余情况就是按照链表或者红黑树结构插入节点，但是这个过程需要加锁（Synchronized）
***** get
****** 步骤
******* table == null; return null;
******* 从 链表/红黑树 节点获取
***** 扩容
****** 多线程扩容
****** 步骤
******* 构建一个 nextTable，其大小为原来的两倍，这个步骤是在单线程环境下完成的
******* 将原来 table 里边的内容复制到 nextTable 中，这个步骤是允许多线程操作
***** 链表转化为红黑树过程
****** 所在链表的元素个数达到了阈值 8 ，则将链表转换为红黑树
****** 红黑树算法
**** 1.7 和 1.8 的区别

*** ConcurrentLinkedQueue
**** 基于链接节点的无边界的线程安全队列，采用 FIFO 原则对元素进行排序，内部采用 CAS 算法
**** 不变性
***** 在入队的最后一个元素的 next 为 null
***** 队列中所有未删除的节点的 item 都不能为 null，且都能从 head 节点遍历到
***** 对于要删除的节点，不是直接将其设置为 null，而是将其 item 值设置为 null，（迭代器会跳过 item 为 null 的节点）
***** 允许 head 和 tail 更新之后。这是什么意思呢？意思是说 head、tail 不总只想第一个元素和最后一个元素（后面阐述）
**** head 的不变性和可变性
**** tail 的不变性和可变性
**** 精妙之处：利用 CAS 来完成数据操作，同时允许队列的不一致性，弱一致性表现淋漓尽致
*** ConcurrentSkipListMap
**** 第三种 key-value 数据结构：SkipList( 跳表 )
**** skipList
***** 平衡二叉树
***** SkipList 让已排序的数据分布在多层链表中，以 0-1 随机数决定一个数据的向上攀升与否，通过“空间来换取时间”的一个算法，\n 在每个节点中增加了向前的指针，在插入、删除、查找是可以忽略一些不可能涉及的结点，从而提高了效率
***** 特性
****** 由很多层结构组成，level 是通过一定的概率随机产生的
****** 每一层都是一个有序的列表，默认是升序，也可以根据创建映射所提供的 Comparator 进行排序，具体取决于使用的构造方法
****** 最底层（Level 1）的链表所包含所有元素
****** 如果一个元素出现在 Level i 的链表中，则它在 Level i 之下的链表也都会出
****** 每个节点都包含两个指针，一个指向同一个链表中的下一个元素，一个指向下面一层的元素
***** 查找、删除、添加
*** ConcurrentSkipListSet



** 7. Atomic
*** 基本类型类
**** 用于通过原子的方式更新基本类型
**** AtomicBoolean
***** 原子更新布尔类型
**** AtomicInteger
***** 原子更新整形
**** AtomicLong
***** 原子更新长整型
*** 数组
**** 通过原子的方式更新数组里的某个元素
**** AtomicIntegerArray
***** 原子更新整型数组里的元素
**** AtomicLongArray
***** 原子更新长整型数组里的元素
**** AtomicReferenceArray
***** 原子更新引用类型数组里的元素
*** 引用类型
**** 如果要原子的更新多个变量，就需要使用这个原子更新引用类型提供的类
**** AtomicReference
***** 原子更新引用类型
**** AtomicReferenceFieldUpdater
***** 原子更新引用类型里的字段
**** AtomicMarkableReference
***** 原子更新带有白哦极为的引用类型
*** 字段类
**** 如果我们只需要某个类里的某个字段，那么就需要使用原子更新字段类
**** AtomicIntegerFieldUpdater
***** 原子更新整型的字段的更新器
**** AtomicLongFieldUpdater
***** 原子更新长整型字段的更新器
**** AtomicStampedReference
***** 原子更新带有版本号的引用类型


** 8. 阻塞队列
*** ArrayBlockingQueue
**** 一个由数组实现的 FIFO 有界阻塞队列
**** ArrayBlockingQueue 有界且固定，在构造函数时确认大小，确认后不支持改变
**** 在多线程环境下不保证 “公平性”
**** 实现
***** ReentrantLock
***** Condition
*** LinkedBlockingQueue
**** 基于链接、无界的 FIFO 阻塞队列
**** 默认情况下元素采用自然顺序升序排序，可以通过指定 Comparator 来对元素进行排序
**** 二叉堆
***** 分类
***** 最大堆
****** 父节点的键值总是大于或等于任何一个子节点的键值
***** 最小堆
****** 父节点的键值总是小于或等于任何一个子节点的键值
***** 添加操作则是不断 “上冒”，而删除操作则是不断 “下掉”
**** 实现
***** ReentrantLock + Condition
***** 二叉堆
*** DelayQueue
**** 支持延时获取元素的无界阻塞队列
**** 应用
***** 缓存：清掉缓存中超时的缓存数据
***** 任务超时数据
**** 实现
***** ReentrantLock + Condition
***** 根据 Delay 时间排序的优先级队列：PriorityQueue
**** Delayed 接口
***** 用来标记那些应该在给定延迟时间之后执行的对象
***** 该接口要求实现它的实现类必须定义一个 compareTo 方法，该方法提供给此接口的 getDelay 方法一致的排序
*** SynchronousQueue
**** 一个没有容量的阻塞队列
**** 应用
***** 交换工作，生产者的线程和消费者的线程同步以传递某些信息、事件或者任务
**** 难搞懂，与 Exchanger 有一拼
*** LinkedTransferQueue
**** 链表组成的无界阻塞队列
**** 相当于， ConcurrentLinkedQueue、SynchronousQueue(公平模式下)、无界的 LinkedBlockingQueues 等的超集
**** 预占模式
***** 有就直接拿走，没有就占着这个位置直到拿到或者超时或者中断
*** LinkedBlockingDeque
**** 由链表组成的双向阻塞队列
**** 容量可选，在初始化时可以设置容量防止其过度膨胀，如果不设置，默认容量大小为 Integer.MAX_VALUE
**** 运用
***** “工作窃取” 模式


** 9. 线程池
*** 好处
**** 降低资源消耗
***** 通过重复利用已创建的线程降低线程创建和销毁造成的消耗
**** 提高响应速度
***** 当任务到达时，任务可以不需要等到线程创建就能立即执行
**** 提高线程的可管理性
***** 进行统一分配、调优和监控
*** Executor
**** Executors
***** 静态工厂类，提供了 Executor、ExecutorService、ScheduledExecutorService、ThreadFactory、Callable 等类的静态工厂方法
**** ThreadPoolExecutor
***** 参数含义
****** corePoolSize
******* 线程池中核心线程的数量
****** maximumPoolSize
******* 线程池中允许的最大线程数
****** keepAliveTime
******* 线程空闲的时间
****** unit
******* keepAliveTime 的单位
****** workQueue
******* 用来保存等待执行的任务的阻塞队列
******* 使用的阻塞队列
******** ArrayBlockingQueue
******** LinkedBlockingQueue
******** SynchronousQueue
******** PriorityBlockingQueue
****** threadFactory
******* 用于设置创建线程的工厂
******* DefaultThreadFactory
****** handler
******* RejectedExecutionHandler，线程池的拒绝策略
******* 分类
******** AbortPolicy：直接抛出异常，默认策略
******** CallerRunsPolicy: 用调用者所在的线程来执行任务
******** DiscardOldestPolicy: 丢弃阻塞队列中靠最前的任务，并执行当前任务
******** DiscardPolicy: 直接丢弃任务
***** 线程池分类
****** newFixedThreadPool
******* 可重用固定线程数的线程池
******* 分析
******** corePoolSize 和 maximumPoolSize 一致
******** 使用 “无界” 队列，LinkedBlockingQueue
******** maximumPoolSize、keepAliveTime、RejectedExecutionHandler 无效
****** newCachedThreadPool
******* 使用单个 worker 线程的 Executor
******* 分析
******** corePoolSize 和 maximumPoolSize 被设置为 1
******** 使用 LinkedBlockingQueue 作为 workerQueue
****** newSingleThreadExecutor
******* 会根据需要创建新线程的线程池
******* 分析
******** corePoolSize 被设置为 0
******** maximumPoolSize 被设置为 Integer.MAX_VALUE
******** SynchronousQueue 作为 WorkerQueue
******** 如果主线程提交任务的速度高于 maxiMumPool 中线程处理任务的速度时，CachedThreadPool 会不断创建心线程，可能会耗尽 CPU 和内存资源
***** 任务提交
****** Executor.execute()
****** ExecutorService.submit()
***** 任务执行
****** 执行流程
***** 线程池调优
****** 两种模型
***** 线程池监控
**** ScheduledThreadPoolExecutor
***** 继承自 ThreadPoolExecutor
***** 给定延迟后执行任务，或者定期执行任务
***** 内部使用 DelayQueue 来实现，会把调度的任务放入 DelayQueue 中，DelayQueue 内部封装 PriorityQueue，这个 priorityQueue 会堆队列中的 ScheduledFutureTask 进行排序
*** Future
**** 异步计算
**** Future
***** 提供操作
****** 执行任务的取消
****** 查询任务是否完成
****** 获取任务的执行结果
**** FutureTask
***** 实现 RunableFuture 接口，既可以作为 Runable 被执行，也可以作为 Future 得到 Callable 的放回置
***** 内部基于 AQS 实现







@endmindmap

PlantUML version 1.2019.11(Sun Sep 22 18:02:15 CST 2019)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.4+10-b520.11
Operating System: Windows 10
Default Encoding: GBK
Language: zh
Country: CN
--></g></svg>